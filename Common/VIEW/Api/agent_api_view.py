from datetime import datetime, dateimport datetimeimport sysimport osfrom threading import Threadfrom django.utils.timesince import timesincefrom django.http import JsonResponsefrom django.db import connectionfrom Common.VIEW.Api.api_views import getUserinfoFromAccessToken, dictfetchallfrom django.contrib.auth.hashers import make_passwordfrom Common.email_settings import Assign_Booking_Email, FCMfrom landing.cotrav_messeging import Render, Bus, Flight, Hotel, Bill, TaxCalcdef operators_by_service_type(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        service_type = request.POST.get('service_type', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllOperatorsbyServiceType', [service_type])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Operators': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def hotels(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllHotels', [])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Hotels': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_hotel(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        hotel_name = request.POST.get('hotel_name', '')        hotel_email = request.POST.get('hotel_email', '')        hotel_contact = request.POST.get('hotel_contact', '')        website = request.POST.get('website', '')        hotel_address = request.POST.get('hotel_address', '')        contact_name = request.POST.get('contact_name', '')        contact_email = request.POST.get('contact_email', '')        contact_no = request.POST.get('contact_no', '')        beneficiary_name = request.POST.get('beneficiary_name', '')        beneficiary_account_no = request.POST.get('beneficiary_account_no', '')        bank_name = request.POST.get('bank_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        is_service_tax_applicable = request.POST.get('is_service_tax_applicable', '')        tds_rate = request.POST.get('tds_rate', '')        gst_id = request.POST.get('gst_id', '')        pan_no = request.POST.get('pan_no', '')        if tds_rate:            tds_rate = tds_rate        else:            tds_rate = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addHotel', [hotel_name,hotel_email,hotel_contact,website,hotel_address,contact_name,contact_email,contact_no,beneficiary_name,beneficiary_account_no,                                                    ifsc_code,is_service_tax_applicable,tds_rate,gst_id,pan_no,user_id,user_type,bank_name])                    emp = dictfetchall(cursor)                    print(emp)                    data = {'success': 1, 'message': "Operator Added Successfully", 'id':emp}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_hotel(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        hotel_name = request.POST.get('hotel_name', '')        hotel_email = request.POST.get('hotel_email', '')        hotel_contact = request.POST.get('hotel_contact', '')        website = request.POST.get('website', '')        hotel_address = request.POST.get('hotel_address', '')        contact_name = request.POST.get('contact_name', '')        contact_email = request.POST.get('contact_email', '')        contact_no = request.POST.get('contact_no', '')        beneficiary_name = request.POST.get('beneficiary_name', '')        beneficiary_account_no = request.POST.get('beneficiary_account_no', '')        bank_name = request.POST.get('bank_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        is_service_tax_applicable = request.POST.get('is_service_tax_applicable', '')        tds_rate = request.POST.get('tds_rate', '')        gst_id = request.POST.get('gst_id', '')        pan_no = request.POST.get('pan_no', '')        hotel_id = request.POST.get('hotel_id', '')        if tds_rate:            tds_rate = tds_rate        else:            tds_rate = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateHotel', [hotel_name,hotel_email,hotel_contact,website,hotel_address, is_service_tax_applicable,tds_rate,gst_id,pan_no,user_id,user_type,hotel_id])                    emp = dictfetchall(cursor)                    print(emp)                    data = {'success': 1, 'message': "Operator Updated Successfully", 'id':emp}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def view_hotel(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        hotel_id = request.POST.get('hotel_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('viewHotel', [hotel_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Hotels': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def operators(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllOperators', [])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Operators': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def operator_contacts(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        operator_id = request.POST.get('operator_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllOperatorContacts', [operator_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'OperatorContacts': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def operator_banks(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        operator_id = request.POST.get('operator_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllOperatorBankAccountDetails', [operator_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'OperatorBanks': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def hotel_contacts(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        operator_id = request.POST.get('hotel_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllHotelContacts', [operator_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'HotelContacts': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def hotel_banks(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        operator_id = request.POST.get('hotel_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllHotelBankAccount', [operator_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'HotelBanks': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def view_operator(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        operator_id = request.POST.get('operator_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('viewOperator', [operator_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Operator': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def operation_managements(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllCorporateOMSAccess', [])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Access': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def relationship_managements(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllCorporateRMSAccess', [])                    emp = dictfetchall(cursor)                    data = {'success': 1, 'Access': emp}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_operator(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        type = request.POST.get('type', '')        username = request.POST.get('username', '')        password = make_password(request.POST.get('password', ''))        operator_name = request.POST.get('operator_name', '')        operator_email = request.POST.get('operator_email', '')        operator_contact = request.POST.get('operator_contact', '')        website = request.POST.get('website', '')        operator_address = request.POST.get('operator_address', '')        is_service_tax_applicable = request.POST.get('is_service_tax_applicable', '')        service_tax_number = request.POST.get('service_tax_number', '')        night_start_time = request.POST.get('night_start_time', '')        night_end_time = request.POST.get('night_end_time', '')        tds_rate = request.POST.get('tds_rate', '')        gst_id = request.POST.get('gst_id', '')        pan_no = request.POST.get('pan_no', '')        is_radio = request.POST.get('is_radio', '')        is_local = request.POST.get('is_local', '')        is_outstation = request.POST.get('is_outstation', '')        is_bus = request.POST.get('is_bus', '')        is_train = request.POST.get('is_train', '')        is_hotel = request.POST.get('is_hotel', '')        is_meal = request.POST.get('is_meal', '')        is_flight = request.POST.get('is_flight', '')        is_water_bottles = request.POST.get('is_water_bottles', '')        is_reverse_logistics = request.POST.get('is_reverse_logistics', '')        if tds_rate:            tds_rate = tds_rate        else:            tds_rate = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addOperator', [type,username,password,operator_name,operator_email,operator_contact,website,is_service_tax_applicable,service_tax_number,                                                    night_start_time,night_end_time,tds_rate,gst_id,pan_no,user_id,user_type,operator_address,is_radio,is_local,is_outstation,                                                    is_bus,is_train,is_hotel,is_meal,is_flight,is_water_bottles,is_reverse_logistics])                    emp = dictfetchall(cursor)                    print(emp)                    data = {'success': 1, 'message': "Operator Added Successfully", 'id':emp}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_operator_contact(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('operator_id', '')        operator_address = request.POST.get('operator_address', '')        contact_name = request.POST.get('contact_name', '')        contact_email = request.POST.get('contact_email', '')        contact_no = request.POST.get('contact_no', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addOperatorContact',                                    [operator_id, contact_name, contact_email, contact_no, operator_address, user_id, user_type])                    emp = dictfetchall(cursor)                    cursor.close()                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Contact Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_operator_bank(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('operator_id', '')        beneficiary_name = request.POST.get('beneficiary_name', '')        beneficiary_account_no = request.POST.get('beneficiary_account_no', '')        bank_name = request.POST.get('bank_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addOperatorBankAccount', [operator_id,beneficiary_name, beneficiary_account_no, bank_name, ifsc_code, user_id, user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Banks Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_hotel_contact(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('hotel_id', '')        operator_address = request.POST.get('operator_address', '')        contact_name = request.POST.get('contact_name', '')        contact_email = request.POST.get('contact_email', '')        contact_no = request.POST.get('contact_no', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addHotelContact',                                    [operator_id, contact_name, contact_email, contact_no, operator_address, user_id, user_type])                    emp = dictfetchall(cursor)                    print(emp)                    cursor.close()                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Contact Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_hotel_bank(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('hotel_id', '')        beneficiary_name = request.POST.get('beneficiary_name', '')        beneficiary_account_no = request.POST.get('beneficiary_account_no', '')        bank_name = request.POST.get('bank_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addHotelBankAccount', [operator_id,beneficiary_name, beneficiary_account_no, bank_name, ifsc_code, user_id, user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Banks Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_operation_managements(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        corporate_id = request.POST.get('corporate_id', '')        service_type_id = request.POST.get('service_type_id', '')        om_id = request.POST.get('agent_id', '')        is_active = request.POST.get('is_active', '')        print(om_id)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addCorporateOMSAccess', [corporate_id,service_type_id, om_id, user_id, user_type,is_active])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "OMS Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_operation_managements(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        corporate_id = request.POST.get('corporate_id', '')        service_type_id = request.POST.get('service_type_id', '')        om_id = request.POST.get('agent_id', '')        oms_id = request.POST.get('oms_id', '')        is_active = request.POST.get('is_active', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateCorporateOMSAccess', [corporate_id,service_type_id, om_id, oms_id, user_id, user_type,is_active])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "OMS Updated Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_relationship_managements(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        corporate_id = request.POST.get('corporate_id', '')        rm_level_1_id = request.POST.get('rm_level_1_id', '')        rm_level_2_id = request.POST.get('rm_level_2_id', '')        is_active = request.POST.get('is_active', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addCorporateRMSAccess', [corporate_id,rm_level_1_id, rm_level_2_id, user_id, user_type,is_active])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "RMS Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_relationship_managements(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        corporate_id = request.POST.get('corporate_id', '')        rm_level_1_id = request.POST.get('rm_level_1_id', '')        rm_level_2_id = request.POST.get('rm_level_2_id', '')        rms_id = request.POST.get('rms_id', '')        is_active = request.POST.get('is_active', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateCorporateRMSAccess', [corporate_id,rm_level_1_id, rm_level_2_id,rms_id, user_id, user_type,is_active])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "RMS Updated Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_operator(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        type = request.POST.get('type', '')        username = request.POST.get('username', '')        operator_name = request.POST.get('operator_name', '')        operator_email = request.POST.get('operator_email', '')        operator_contact = request.POST.get('operator_contact', '')        website = request.POST.get('website', '')        operator_address = request.POST.get('operator_address', '')        is_service_tax_applicable = request.POST.get('is_service_tax_applicable', '')        service_tax_number = request.POST.get('service_tax_number', '')        night_start_time = request.POST.get('night_start_time', '')        night_end_time = request.POST.get('night_end_time', '')        tds_rate = request.POST.get('tds_rate', '')        gst_id = request.POST.get('gst_id', '')        pan_no = request.POST.get('pan_no', '')        is_radio = request.POST.get('is_radio', '')        is_local = request.POST.get('is_local', '')        is_outstation = request.POST.get('is_outstation', '')        is_bus = request.POST.get('is_bus', '')        is_train = request.POST.get('is_train', '')        is_hotel = request.POST.get('is_hotel', '')        is_meal = request.POST.get('is_meal', '')        is_flight = request.POST.get('is_flight', '')        is_water_bottles = request.POST.get('is_water_bottles', '')        is_reverse_logistics = request.POST.get('is_reverse_logistics', '')        operator_id = request.POST.get('operator_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateOperator', [type,username,operator_name,operator_email,operator_contact,website,is_service_tax_applicable,service_tax_number,                                                    night_start_time,night_end_time,tds_rate,gst_id,pan_no,operator_id,user_id,user_type,operator_address,is_radio,is_local,                                                       is_outstation,is_bus,is_train,is_hotel,is_meal,is_flight,is_water_bottles,is_reverse_logistics])                    company = dictfetchall(cursor)                    print(company)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Updated Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_operator_contact(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('operator_id', '')        contact_id = request.POST.get('contact_id')        operator_address = request.POST.get('operator_address', '')        contact_name = request.POST.get('contact_name', '')        contact_email = request.POST.get('contact_email', '')        contact_no = request.POST.get('contact_no', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateOperatorContact',[operator_id, contact_name, contact_email, contact_no, operator_address, user_id, user_type, contact_id])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Contact Updated Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_operator_bank(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        bank_id = request.POST.get('bank_id', '')        beneficiary_name = request.POST.get('beneficiary_name', '')        beneficiary_account_no = request.POST.get('beneficiary_account_no', '')        bank_name = request.POST.get('bank_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateOperatorBankAccount', [beneficiary_name, beneficiary_account_no, bank_name, ifsc_code, user_id, user_type, bank_id])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator BankAccount Updated Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_hotel_contact(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('hotel_id', '')        contact_id = request.POST.get('contact_id')        operator_address = request.POST.get('operator_address', '')        contact_name = request.POST.get('contact_name', '')        contact_email = request.POST.get('contact_email', '')        contact_no = request.POST.get('contact_no', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateHotelContact',[operator_id, contact_name, contact_email, contact_no, operator_address, user_id, user_type, contact_id])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Contact Updated Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_hotel_bank(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        bank_id = request.POST.get('bank_id', '')        beneficiary_name = request.POST.get('beneficiary_name', '')        beneficiary_account_no = request.POST.get('beneficiary_account_no', '')        bank_name = request.POST.get('bank_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateHotelBankAccount', [beneficiary_name, beneficiary_account_no, bank_name, ifsc_code, user_id, user_type, bank_id])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator BankAccount Updated Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_operator(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('operator_id', '')        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteOperators', [operator_id,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Deleted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_operator_contact(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_id = request.POST.get('user_id', '')        contact_id = request.POST.get('contact_id', '')        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteOperatorContact', [contact_id,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Contact Deleted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_operator_bank(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_id = request.POST.get('user_id', '')        bank_id = request.POST.get('bank_id', '')        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteOperatorBankAccount', [bank_id,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Bank Deleted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_hotel(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('hotel_id', '')        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteHotels', [operator_id,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Hotel Deleted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_hotel_contact(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_id = request.POST.get('user_id', '')        contact_id = request.POST.get('contact_id', '')        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteHotelContact', [contact_id,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Hotel Contact Deleted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_hotel_bank(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_id = request.POST.get('user_id', '')        bank_id = request.POST.get('bank_id', '')        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteHotelBankAccount', [bank_id,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Hotel Bank Deleted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def operator_rates(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        if user_id:            pass        else:            user_id = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllOperatorRates', [user_id])                    emp = dictfetchall(cursor)                    data = {'success': 1, 'Rates': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def view_operator_rate(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        rate_id = request.POST.get('rate_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('viewOperatorRate', [rate_id])                    emp = dictfetchall(cursor)                    data = {'success': 1, 'Rate': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_operator_rate(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('operator_id', '')        city_id = request.POST.get('city_id', '')        taxi_type_id = request.POST.get('taxi_type_id', '')        package_name = request.POST.get('package_name', '')        tour_type = request.POST.get('tour_type', '')        kms = request.POST.get('kms', '')        hours = request.POST.get('hours', '')        km_rate = request.POST.get('km_rate', '')        hour_rate = request.POST.get('hour_rate', '')        base_rate = request.POST.get('base_rate', '')        night_rate = request.POST.get('night_rate', '')        fuel_rate = request.POST.get('fuel_rate')        if fuel_rate:            fuel_rate = fuel_rate        else:            fuel_rate = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addOperatorRate', [operator_id,city_id,taxi_type_id,package_name,tour_type,kms,hours,km_rate,hour_rate,                                    base_rate,night_rate,fuel_rate,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Rate Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_operator_rate(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        rate_id = request.POST.get('rate_id', '')        operator_id = request.POST.get('operator_id', '')        city_id = request.POST.get('city_id', '')        taxi_type_id = request.POST.get('taxi_type_id', '')        package_name = request.POST.get('package_name', '')        tour_type = request.POST.get('tour_type', '')        kms = request.POST.get('kms', '')        hours = request.POST.get('hours', '')        km_rate = request.POST.get('km_rate', '')        hour_rate = request.POST.get('hour_rate', '')        base_rate = request.POST.get('base_rate', '')        night_rate = request.POST.get('night_rate', '')        fuel_rate = request.POST.get('fuel_rate', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateOperatorRate', [operator_id,city_id,taxi_type_id,package_name,tour_type,kms,hours,km_rate,hour_rate,                                    base_rate,night_rate,fuel_rate,rate_id,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Rate Updated Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_operator_rate(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_id = request.POST.get('user_id', '')        rate_id = request.POST.get('rate_id', '')        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteOperatorRate', [rate_id,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Rate Deleted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def operator_drivers(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        if user_id:            pass        else:            user_id =0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllOperatorDrivers', [user_id])                    emp = dictfetchall(cursor)                    data = {'success': 1, 'Drivers': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def view_operator_driver(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        driver_id = request.POST.get('driver_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('viewOperatorDriver', [driver_id])                    emp = dictfetchall(cursor)                    data = {'success': 1, 'Drivers': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_operator_driver(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('operator_id', '')        driver_name = request.POST.get('driver_name', '')        driver_contact = request.POST.get('driver_contact', '')        driver_email = request.POST.get('driver_email', '')        licence_no = request.POST.get('licence_no', '')        password = make_password(request.POST.get('password', ''))        fcm_regid = request.POST.get('fcm_regid', '')        taxi_id = request.POST.get('taxi_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addOperatorDriver', [operator_id,driver_name,driver_contact,driver_email,licence_no,password,fcm_regid,user_id,user_type,taxi_id])                    emp = dictfetchall(cursor)                    print(emp)                    data = {'success': 1, 'message': "Operator Driver Added Successfully", 'id':emp}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_operator_driver(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        driver_id = request.POST.get('driver_id', '')        user_id = request.POST.get('user_id', '')        operator_id = request.POST.get('operator_id', '')        driver_name = request.POST.get('driver_name', '')        driver_contact = request.POST.get('driver_contact', '')        driver_email = request.POST.get('driver_email', '')        licence_no = request.POST.get('licence_no', '')        fcm_regid = request.POST.get('fcm_regid', '')        taxi_id = request.POST.get('taxi_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateOperatorDriver', [operator_id,driver_name,driver_contact,driver_email,licence_no,fcm_regid,driver_id,user_id,user_type,taxi_id])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Driver Updated Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_operator_driver(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_id = request.POST.get('user_id', '')        driver_id = request.POST.get('driver_id', '')        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteOperatorDriver', [driver_id,user_id,user_type])                    emp = dictfetchall(cursor)                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Operator Driver Deleted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_taxi_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_type = request.POST.get('booking_type', '')        page_no = request.POST.get('page_no', '')        limit_from = 0        limit_to = 0        print(page_no)        if page_no:            limit_from = (int(page_no) - 1) * 10            limit_to = 10        else:            limit_from = 0            limit_to = 2147483647        user = {}        user_token = req_token.split()        print("Tokennnnnnn")        print(user_token)        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                print("USER ID")                print(user.id)                cursor = connection.cursor()                cursor.callproc('getAllTaxiBookings', [booking_type,limit_from,limit_to,user.id])                emp = dictfetchall(cursor)                cursor.close()                for e in emp:                    try:                        cursor1 = connection.cursor()                        booking_id = e['id']                        print(booking_id)                        cursor1.callproc('getAllTaxiBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        e['Passangers'] = passanger                        cursor1.close()                        cursor2 = connection.cursor()                        cursor2.callproc('getAllTrackingStatusByBookingID', [1,booking_id])                        flights = dictfetchall(cursor2)                        e['TrackingStatus'] = flights                        cursor2.close()                        if e['is_invoice']:                            cursor2 = connection.cursor()                            invoice_id = e['invoice_id']                            cursor2.callproc('getallTaxiInvoiceActionLog', [invoice_id])                            invoicess = dictfetchall(cursor2)                            e['InvoiceActionLog'] = invoicess                            cursor2.close()                        e['booking_type'] = booking_type                    except Exception as e:                        data = {'success': 0, 'message': getattr(e, 'message', str(e))}                        return JsonResponse(data)                data = {'success': 1, 'Bookings': emp, 'booking_type':booking_type}                return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_add_taxi_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user_id = request.POST.get('user_id', '')        corporate_id = request.POST.get('corporate_id', '')        spoc_id = request.POST.get('spoc_id', '')        group_id = request.POST.get('group_id', '')        subgroup_id = request.POST.get('subgroup_id', '')        tour_type = request.POST.get('tour_type', '')        pickup_city = request.POST.get('pickup_city', '')        pickup_location = request.POST.get('pickup_location', '')        drop_location = request.POST.get('drop_location', '')        pickup_datetime = request.POST.get('pickup_datetime', '')        pickup_datetime = datetime.datetime.strptime(pickup_datetime, '%d-%m-%Y %H:%M')        taxi_type = request.POST.get('taxi_type')        package_id = request.POST.get('package_id')        no_of_days = request.POST.get('no_of_days', '')        if taxi_type:            taxi_type = taxi_type        else:            taxi_type = 0        if package_id:            package_id = package_id        else:            package_id = 0        if no_of_days:            no_of_days = no_of_days        else:            no_of_days = 0        reason_booking = request.POST.get('reason_booking', '')        no_of_seats = request.POST.get('no_of_seats', '')        employees = request.POST.getlist('employees', '')        user_token = req_token.split()        if user_token[0] == 'Token':            user = {}            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                cursor = connection.cursor()                try:                    cursor.callproc('addTaxiBooking', [user_type,user_id,corporate_id,spoc_id,group_id,subgroup_id,tour_type,pickup_city,pickup_location,drop_location,pickup_datetime,                                                             taxi_type,package_id,no_of_days,reason_booking,no_of_seats])                    booking_id = dictfetchall(cursor)                    cursor.close()                    for id in booking_id:                        for e in employees:                            cursor = connection.cursor()                            cursor.callproc('addEmployeeTaxiBooking',[id['id'],e])                            cursor.close()                    else:                        data = {'success': 1, 'message': "Taxi Booking Added Successfully"}                        return JsonResponse(data)                except Exception as e:                    print(e)                    data = {'success': 1, 'message': "Error in Data Insert"}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def accept_taxi_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('acceptTaxiBooking', [booking_id,user_id,user_type])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Taxi Booking Accepted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def reject_taxi_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('rejectTaxiBooking', [booking_id,user_id,user_type,user_comment])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Taxi Booking Rejected Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def assign_operator_taxi_boooking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        operator_id = request.POST.get('operator_id', '')        user_id = request.POST.get('user_id', '')        operator_contact = request.POST.get('operator_contact', '')        operator_email = request.POST.get('operator_email', '')        operator_package_id = request.POST.get('operator_package_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('assignOperatorTaxiBooking',[operator_id, booking_id, user_id, user_type, operator_package_id])                    company = dictfetchall(cursor)                    print(company)                    if company:                        data = {'success': 0, 'message': company}                    else:                        # communication = Assign_Booking_Email()                        # resp1 = communication.send_client_sms("", "Taxi")                        # resp1 = communication.is_client_email("", "Taxi", "")                        data = {'success': 1, 'message': "Taxi Booking Operator Assign Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def assign_taxi_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        vendor_booking_id = request.POST.get('vendor_booking_id', '')        operator_id = request.POST.get('operator_id', '')        driver_id = request.POST.get('driver_id', '')        operator_package_id = request.POST.get('operator_package_id', '')        is_client_sms = request.POST.get('is_client_sms', '')        is_client_email = request.POST.get('is_client_email', '')        is_driver_sms = request.POST.get('is_driver_sms', '')        type_name = request.POST.get('taxi_types', '')        brand_name = "NA"        model_name = request.POST.get('taxi_model', '')        no_of_seats = 4        taxi_type_id = ''        taxi_id = request.POST.get('taxi_id', '')        tour_type = request.POST.get('tour_typ_save', '')        taxi_model_id = ''        taxi_reg_no = taxi_id        make_year = 0        garage_location = "0"        garage_distance = 0        website = request.POST.get('website', '')        operator_address = request.POST.get('operator_address', '')        service_tax_number = request.POST.get('service_tax_number', '')        night_start_time = request.POST.get('night_start_time', '')        night_end_time = request.POST.get('night_end_time', '')        tds_rate = request.POST.get('tds_rate', '')        gst_id = request.POST.get('gst_id', '')        pan_no = request.POST.get('pan_no', '')        operator_name = operator_id        operator_email = "NA"        operator_contact = "NA"        type = tour_type        user_id = user_id        username = "NA"        password = "taxi123"        is_service_tax_applicable = 0        operator_id = request.POST.get('operator_id', '')        driver_name = request.POST.get('driver_name', '')        driver_contact = request.POST.get('driver_contact', '')        driver_email = request.POST.get('driver_email', '')        licence_no = request.POST.get('licence_no', '')        password = make_password(request.POST.get('password', ''))        fcm_regid = request.POST.get('fcm_regid', '')        taxi_id = request.POST.get('taxi_id', '')        is_radio = 1        is_local = 1        is_outstation = 1        is_bus = 0        is_train = 0        is_hotel = 0        is_meal = 0        is_flight = 0        is_water_bottles = 0        is_reverse_logistics = 0        operator_id = ''        driver_name = driver_id        driver_name = [x.strip() for x in driver_name.split('/')]        driver_contact = driver_contact        fcm_regid = 0        password = "NA"        taxi_act_id = ''        oper_id = ''        driver_id_id = ''        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor11 = connection.cursor()                    cursor11.callproc('addTaxiTypes', [type_name,user_id,user_type])                    country_id = dictfetchall(cursor11)                    cursor11.close()                    for conty_id in country_id:                        taxi_type_id = conty_id['id']                    cursor12 = connection.cursor()                    cursor12.callproc('addTaxiModel',                                      [brand_name, model_name, taxi_type_id, no_of_seats, user_id, user_type])                    country_id = dictfetchall(cursor12)                    cursor12.close()                    for conty_id in country_id:                        taxi_model_id = conty_id['id']                    model_id = taxi_model_id                    cursor13 = connection.cursor()                    cursor13.callproc('addTaxi',                                      [model_id, taxi_reg_no, make_year, garage_location, garage_distance, user_id,                                       user_type])                    country_id = dictfetchall(cursor13)                    cursor13.close()                    for conty_id in country_id:                        taxi_act_id = conty_id['id']                    taxi_id = taxi_act_id                    cursor14 = connection.cursor()                    cursor14.callproc('addOperator',                                      [type, username, password, operator_name, operator_email, operator_contact,                                       website, is_service_tax_applicable, service_tax_number,                                       night_start_time, night_end_time, tds_rate, gst_id, pan_no, user_id, user_type,                                       operator_address,is_radio,is_local,is_outstation,                                       is_bus,is_train,is_hotel,is_meal,is_flight,is_water_bottles,is_reverse_logistics])                    country_id1 = dictfetchall(cursor14)                    cursor14.close()                    print(country_id1)                    for conty_id in country_id1:                        oper_id = conty_id['id']                    operator_id = oper_id                    print("operator_id")                    print(operator_id)                    cursor15 = connection.cursor()                    cursor15.callproc('addOperatorDriver',                             [operator_id, driver_name[0], driver_contact, driver_email, licence_no, password, fcm_regid,                              user_id, user_type, taxi_id])                    country_id = dictfetchall(cursor15)                    print("driver id")                    print(country_id)                    cursor15.close()                    for conty_id in country_id:                        driver_id_id = conty_id['id']                    driver_id = driver_id_id                    cursor = connection.cursor()                    cursor.callproc('assignTaxiBooking', [vendor_booking_id,operator_id,driver_id,taxi_id,booking_id,user_id,user_type, operator_package_id])                    company = dictfetchall(cursor)                    print(company)                    if company:                        data = {'success': 0, 'message': company}                    else:                        cursor2 = connection.cursor()                        cursor2.callproc('viewTaxiBooking', [booking_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        cursor1 = connection.cursor()                        cursor1.callproc('getAllTaxiBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        emp[0]['Passangers'] = passanger                        cursor1.close()                        cursor3 = connection.cursor()                        cursor3.callproc('getAllApproverByBookingID', [booking_id, 1])                        approvers = dictfetchall(cursor3)                        cursor3.close()                        fcm = FCM()                        thread = Thread(target=fcm.send_notification, args=(emp, approvers, "Taxi"))                        thread.start()                        communication = Assign_Booking_Email()                        if is_client_sms:                            thread = Thread(target=communication.send_client_sms, args=(emp, "Taxi"))                            thread.start()                            #resp1 = communication.send_client_sms(emp, "Taxi")                        if is_client_email:                            thread = Thread(target=communication.is_client_email, args=(emp, "Taxi", ""))                            thread.start()                            #resp1 = communication.is_client_email(emp, "Taxi", "")                        data = {'success': 1, 'message': "Taxi Booking Assign Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_taxi_invoice(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        payin_slip = request.POST.get('payin_slip', '')        tax_on_management_fee = request.POST.get('tax_on_management_fee', '')        tax_on_management_fee_percentage = request.POST.get('tax_on_management_fee_percentage', '')        management_fee_igst = request.POST.get('management_fee_igst', '')        management_fee_cgst = request.POST.get('management_fee_cgst', '')        management_fee_sgst = request.POST.get('management_fee_sgst', '')        management_fee_igst_rate = request.POST.get('management_fee_igst_rate', '')        management_fee_cgst_rate = request.POST.get('management_fee_cgst_rate', '')        management_fee_sgst_rate = request.POST.get('management_fee_sgst_rate', '')        igst_amount = request.POST.get('igst_amount', '')        cgst_amount = request.POST.get('cgst_amount', '')        sgst_amount = request.POST.get('sgst_amount', '')        hours_done = request.POST.get('hours_done', '')        if not hours_done:            hours_done=0        allowed_hours = request.POST.get('allowed_hours', '')        if not allowed_hours:            allowed_hours=0        extra_hours = request.POST.get('extra_hours', '')        if not extra_hours:            extra_hours=0        charge_hour = request.POST.get('charge_hour', '')        if not charge_hour:            charge_hour=0        days = request.POST.get('days', '')        if not days:            days=0        start_km = request.POST.get('start_km', '')        if not start_km:            start_km=0        end_km = request.POST.get('end_km', '')        if not end_km:            end_km=0        kms_done = request.POST.get('kms_done', '')        if not kms_done:            kms_done=0        allowed_kms = request.POST.get('allowed_kms', '')        if not allowed_kms:            allowed_kms=0        extra_kms = request.POST.get('extra_kms', '')        if not extra_kms:            extra_kms=0        extra_km_rate = request.POST.get('extra_km_rate', '')        if not extra_km_rate:            extra_km_rate=0        cotrav_billing_entity = request.POST.get('cotrav_billing_entity', '')        bb_entity = request.POST.get('bb_entity', '')        radio_rate = request.POST.get('radio_rate', '')        if not radio_rate:            radio_rate=0        base_rate = request.POST.get('base_rate', '')        if not base_rate:            base_rate=0        extra_hr_charges = request.POST.get('extra_hr_charges', '')        if not extra_hr_charges:            extra_hr_charges=0        extra_km_charges = request.POST.get('extra_km_charges', '')        if not extra_km_charges:            extra_km_charges=0        driver_allowance = request.POST.get('driver_allowance', '')        if not driver_allowance:            driver_allowance=0        total_excluding_tax = request.POST.get('total_excluding_tax', '')        if not total_excluding_tax:            total_excluding_tax=0        other_charges = request.POST.get('other_charges', '')        if not other_charges:            other_charges=0        total = request.POST.get('total', '')        if not total:            total=0        sub_total = request.POST.get('sub_total', '')        if hours_done:            pass        else:            charge_hour=0        if allowed_hours:            pass        else:            allowed_hours=0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addTaxiInvoice', [tax_on_management_fee,tax_on_management_fee_percentage,management_fee_igst,management_fee_cgst,                    management_fee_sgst,management_fee_igst_rate,management_fee_cgst_rate, management_fee_sgst_rate,igst_amount,cgst_amount,sgst_amount,                    hours_done,allowed_hours,extra_hours,charge_hour,days,start_km,end_km,kms_done,allowed_kms,extra_kms,extra_km_rate,base_rate,extra_hr_charges,                    extra_km_charges,driver_allowance,total_excluding_tax,other_charges,total,sub_total,radio_rate,bb_entity,cotrav_billing_entity,booking_id,user_id,user_type,payin_slip])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Taxi Booking Invoice Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_new_dutyslip(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        payin_slip = request.POST.get('payin_slip', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addNewDutySlip', [booking_id,user_id,user_type,payin_slip])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Duty Slip Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)    def upload_new_ticket(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        payin_slip = request.POST.get('client_ticket_path', '')        booking_type = int(request.POST.get('booking_type', ''))        is_client = request.POST.get('is_client', '')                client_ticket = request.POST.get('client_ticket', '')        if booking_type == 2:            print("in sys tem gen")            cursor2 = connection.cursor()            cursor2.callproc('viewBusBooking', [booking_id])            emp = dictfetchall(cursor2)            cursor2.close()            cursor1 = connection.cursor()            cursor1.callproc('getAllBusBookingPassangers', [booking_id])            passanger = dictfetchall(cursor1)            emp[0]['Passangers'] = passanger            cursor1.close()            if client_ticket == '1':                voucher = emp[0]                bus_pdf = Bus(voucher)                get_vou = bus_pdf.get(request)                payin_slip = get_vou[0]                payin_slip = "/media/Email_Voucher_PDF/"+str(payin_slip)        client_ticket = request.POST.get('client_ticket', '')        if booking_type == 4:            print("in sys tem gen")            cursor2 = connection.cursor()            cursor2.callproc('viewHotelBooking', [booking_id])            emp = dictfetchall(cursor2)            cursor2.close()            cursor1 = connection.cursor()            cursor1.callproc('getAllHotelBookingPassangers', [booking_id])            passanger = dictfetchall(cursor1)            emp[0]['Passangers'] = passanger            cursor1.close()            if client_ticket == '1':                voucher = emp[0]                bus_pdf = Hotel(voucher)                get_vou = bus_pdf.get(request)                payin_slip = get_vou[0]                payin_slip = "/media/Email_Voucher_PDF/" + str(payin_slip)        if booking_type == 5:            print("in sys tem gen")            cursor2 = connection.cursor()            cursor2.callproc('viewFlightBooking', [booking_id])            emp = dictfetchall(cursor2)            cursor2.close()            cursor1 = connection.cursor()            cursor1.callproc('getAllFlightBookingPassangers', [booking_id])            passanger = dictfetchall(cursor1)            emp[0]['Passangers'] = passanger            cursor1.close()            cursor3 = connection.cursor()            cursor3.callproc('getAllFlightBookingFlights', [booking_id])            flights = dictfetchall(cursor3)            cursor3.close()            emp[0]['Flights'] = flights            DEP_DATE_0 = ''            for i, f in enumerate(flights):                print(f)                ARRV_DATE_i = f['arrival_datetime']                DEP_DATE_i = f['departure_datetime']                adDate = datetime.datetime.strptime(str(DEP_DATE_i), "%d-%m-%Y %H:%M")                ddDate = datetime.datetime.strptime(str(ARRV_DATE_i), "%d-%m-%Y %H:%M")                dayHours_onword_i = timesince(adDate, ddDate)                if i == 0:                    DEP_DATE_0 = f['arrival_datetime']                if i == 1 or i == 2 or i == 3:                    ii = i - 1                    adDate = datetime.datetime.strptime(str(DEP_DATE_0), "%d-%m-%Y %H:%M")                    ddDate = datetime.datetime.strptime(str(DEP_DATE_i), "%d-%m-%Y %H:%M")                    emp[0]['DELAY_' + str(i)] = timesince(adDate, ddDate)                    DEP_DATE_0 = f['arrival_datetime']                emp[0]['DURATION_' + str(i)] = dayHours_onword_i            if client_ticket == '1':                voucher = emp[0]                bus_pdf = Flight(voucher)                get_vou = bus_pdf.get(request)                payin_slip = get_vou[0]                payin_slip = "/media/Email_Voucher_PDF/" + str(payin_slip)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('uploadNewClientVendorTicket', [booking_id,user_id,user_type, booking_type, is_client,payin_slip])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Duty Slip Added Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)################################################### BUS #############################def agent_bus_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_type = request.POST.get('booking_type', '')        page_no = request.POST.get('page_no', '')        limit_from = 0        limit_to = 0        print(page_no)        if page_no:            limit_from = (int(page_no) - 1) * 10            limit_to = 10        else:            limit_from = 0            limit_to = 2147483647        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllAgentBusBookings', [booking_type,limit_from,limit_to,user.id])                    emp = dictfetchall(cursor)                    cursor.close()                    for e in emp:                        cursor1 = connection.cursor()                        booking_id = e['id']                        print(booking_id)                        cursor1.callproc('getAllBusBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        e['Passangers'] = passanger                        cursor1.close()                        cursor2 = connection.cursor()                        cursor2.callproc('getAllTrackingStatusByBookingID', [2, booking_id])                        flights = dictfetchall(cursor2)                        e['TrackingStatus'] = flights                        cursor2.close()                        if e['is_invoice']:                            cursor2 = connection.cursor()                            invoice_id = e['invoice_id']                            print(invoice_id)                            print("iiiiiiinnnnnvvvvvoooo")                            cursor2.callproc('getallBusInvoiceActionLog', [invoice_id])                            invoicess = dictfetchall(cursor2)                            e['InvoiceActionLog'] = invoicess                            cursor2.close()                        e['booking_type'] = booking_type                    data = {'success': 1, 'Bookings': emp, 'booking_type':booking_type}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def accept_bus_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('acceptBusBooking', [booking_id,user_id,user_type])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Bus Booking Accepted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def reject_bus_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('rejectBusBooking', [booking_id,user_id,user_type,user_comment])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Bus Booking Rejected Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def assign_bus_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        is_mobile = int(request.POST.get('is_mobile', '0'))        ticket_no = request.POST.get('ticket_no', '')        pnr_no = request.POST.get('pnr_no', '')        assign_bus_type_id = request.POST.get('assign_bus_type_id', '')        seat_no = request.POST.getlist('seat_no', '')        employee_id = request.POST.getlist('employee_id', '')        portal_used = request.POST.get('portal_used', '')        operator_name = request.POST.get('operator_name', '')        operator_contact = request.POST.get('operator_contact', '')        boarding_point = request.POST.get('boarding_point', '')        droping_point = request.POST.get('droping_point', '')        boarding_datetime = request.POST.get('boarding_datetime', '')        boarding_datetime = datetime.datetime.strptime(boarding_datetime, '%d-%m-%Y %H:%M')        client_ticket_path = request.POST.get('client_ticket_path')        vender_ticket_path = request.POST.get('vender_ticket_path')        client_ticket = request.POST.get('client_ticket')        if not client_ticket_path:            client_ticket = 1        is_client_sms = request.POST.get('is_client_sms', '')        is_client_email = request.POST.get('is_client_email', '')        is_driver_sms = request.POST.get('is_driver_sms', '')        if(is_mobile == 0):            ticket_price = request.POST.get('ticket_price', '')            management_fee = request.POST.get('management_fee', '')            tax_mng_amt = request.POST.get('tax_mng_amt', '')            tax_on_management_fee = request.POST.get('tax_on_management_fee', '')            tax_on_management_fee_percentage = request.POST.get('tax_on_management_fee_percentage', '')            sub_total = request.POST.get('sub_total', '')            management_fee_igst = request.POST.get('management_fee_igst', '')            management_fee_cgst = request.POST.get('management_fee_cgst', '')            management_fee_sgst = request.POST.get('management_fee_sgst', '')            management_fee_igst_rate = request.POST.get('management_fee_igst_rate', '')            management_fee_cgst_rate = request.POST.get('management_fee_cgst_rate', '')            management_fee_sgst_rate = request.POST.get('management_fee_sgst_rate', '')            cgst = request.POST.get('cgst', '')            sgst = request.POST.get('sgst', '')            igst = request.POST.get('igst', '')            cotrav_billing_entity = request.POST.get('cotrav_billing_entity', '')            oper_ticket_price = request.POST.get('oper_ticket_price', '')            oper_commission = request.POST.get('oper_commission', '')            oper_commission_type = request.POST.get('oper_commission_type', '')            oper_cotrav_billing_entity = request.POST.get('oper_cotrav_billing_entity', '')            oper_cgst = request.POST.get('oper_cgst', '')            oper_sgst = request.POST.get('oper_sgst', '')            oper_igst = request.POST.get('oper_igst', '')            igst_amount = request.POST.get('igst_amount', '')            cgst_amount = request.POST.get('cgst_amount', '')            sgst_amount = request.POST.get('sgst_amount', '')            tax_on_management_fee = tax_mng_amt        else:            corporate_id = request.POST.get('corporate_id', '')            service_type = 4            cotrav_billing_entity = request.POST.get('cotrav_billing_entity', '')            corporate_billing_entity = request.POST.get('corporate_billing_entity', '')            ticket_price = request.POST.get('ticket_price', '')            no_of_passanger = request.POST.get('ticket_price', '')            oper_ticket_price = request.POST.get('oper_ticket_price', '')            oper_cotrav_billing_entity = request.POST.get('oper_cotrav_billing_entity', '')            oper_billing_entity = request.POST.get('oper_billing_entity', '')            oper_commission = request.POST.get('oper_commission', '')            oper_commission_type = request.POST.get('oper_commission_type', '')            tx = TaxCalc(corporateid=corporate_id, service_type=service_type,                         cotrav_billing_entity=cotrav_billing_entity,                         corporate_billing_entity=corporate_billing_entity, ticket_price=ticket_price,                         no_of_passanger=no_of_passanger, oper_ticket_price=oper_ticket_price,                         oper_cotrav_billing_entity=oper_cotrav_billing_entity, oper_billing_entity=oper_billing_entity)            txx = tx.taxOnManagement()            if (service_type == 6):                txxx = tx.hotel_gst()            else:                txxx = tx.gst()            total_billing_amount = tx.total_billing_amount()            operator_calc = tx.oper_tax_calc()            details = tx.detailTax()            ticket_price = details['ticket_price']            management_fee = details['management_fee']            tax_mng_amt = details['tax_on_management_fee']            tax_on_management_fee = details['tax_on_management_fee']            tax_on_management_fee_percentage = details['tax_on_management_fee_percentage']            sub_total = details['sub_total']            management_fee_igst = details['management_fee_igst']            management_fee_cgst = details['management_fee_sgst']            management_fee_sgst = details['management_fee_sgst']            management_fee_igst_rate = details['management_fee_igst_rate']            management_fee_cgst_rate = details['management_fee_cgst_rate']            management_fee_sgst_rate = details['management_fee_sgst_rate']            cgst = details['cgst']            sgst = details['sgst']            igst = details['igst']            oper_cgst = details['oper_cgst']            oper_sgst = details['oper_sgst']            oper_igst = details['oper_igst']            igst_amount = details['oper_igst_amount']            cgst_amount = details['oper_cgst_amount']            sgst_amount = details['oper_sgst_amount']        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('assignBusBooking',                                    [ticket_no, pnr_no, assign_bus_type_id, 1, portal_used, operator_name,                                     operator_contact, boarding_point, boarding_datetime, booking_id, user_id,                                     user_type, ticket_price, management_fee, tax_on_management_fee,                                     tax_on_management_fee_percentage, sub_total, cotrav_billing_entity, igst, cgst,                                     sgst, management_fee_igst, management_fee_cgst, management_fee_sgst,                                     management_fee_igst_rate, management_fee_cgst_rate, management_fee_sgst_rate,                                     tax_mng_amt, oper_ticket_price, oper_commission, oper_commission_type,                                     oper_cotrav_billing_entity, oper_igst, oper_cgst, oper_sgst, client_ticket_path,                                     vender_ticket_path, igst_amount, cgst_amount, sgst_amount, droping_point])                    company = dictfetchall(cursor)                    print("calling procedure")                    print(company)                    if company:                        data = {'success': 0, 'message': company}                    else:                        print(employee_id)                        for xx in range(len(employee_id)):                            cursor26 = connection.cursor()                            print("in ememememememem")                            print(seat_no[xx])                            print(employee_id[xx])                            cursor26.callproc('updateBusSeatNo', [str(seat_no[xx]), employee_id[xx], booking_id])                            result = dictfetchall(cursor26)                            cursor26.close()                        cursor2 = connection.cursor()                        cursor2.callproc('viewBusBooking', [booking_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        cursor1 = connection.cursor()                        cursor1.callproc('getAllBusBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        emp[0]['Passangers'] = passanger                        cursor1.close()                        print("in send page")                        get_voucher_path = ''                        print(client_ticket)                        if client_ticket == 1:                            voucher = emp[0]                            bus_pdf = Bus(voucher)                            get_vou = bus_pdf.get(request)                            payin_slip = get_vou[0]                            get_voucher_path = os.path.join(os.path.abspath(os.path.dirname("__file__")), "media//Email_Voucher_PDF", payin_slip)                            cursor11 = connection.cursor()                            cursor11.callproc('uploadNewClientVendorTicket',                                            [booking_id, user_id, user_type, 2, 1, get_voucher_path])                            company = dictfetchall(cursor11)                        else:                            get_voucher_path = client_ticket_path                        fcm = FCM()                        thread = Thread(target=fcm.send_notification, args=(emp, "Bus"))                        thread.start()                        add_booking_email = Assign_Booking_Email()                        if is_client_sms:                            thread = Thread(target=add_booking_email.send_client_sms, args=(emp, "Bus"))                            thread.start()                            # resp1 = add_booking_email.send_client_sms(emp, "Bus")                        if is_client_email:                            thread = Thread(target=add_booking_email.is_client_email, args=(emp, "Bus", get_voucher_path))                            thread.start()                            # resp1 = add_booking_email.is_client_email(emp, "Bus",get_voucher_path)                        data = {'success': 1, 'message': "Bus Booking Assigned Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)################################################### TRAIN  #############################def agent_train_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_type = request.POST.get('booking_type', '')        page_no = request.POST.get('page_no', '')        limit_from = 0        limit_to = 0        print(page_no)        if page_no:            limit_from = (int(page_no) - 1) * 10            limit_to = 10        else:            limit_from = 0            limit_to = 2147483647        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllAgentTrainBookings', [booking_type,limit_from,limit_to,user.id])                    emp = dictfetchall(cursor)                    cursor.close()                    for e in emp:                        cursor1 = connection.cursor()                        booking_id = e['id']                        print(booking_id)                        cursor1.callproc('getAllTrainBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        e['Passangers'] = passanger                        cursor1.close()                        cursor2 = connection.cursor()                        cursor2.callproc('getAllTrackingStatusByBookingID', [3, booking_id])                        flights = dictfetchall(cursor2)                        e['TrackingStatus'] = flights                        cursor2.close()                        if e['is_invoice']:                            cursor2 = connection.cursor()                            invoice_id = e['invoice_id']                            print(invoice_id)                            print("iiiiiiinnnnnvvvvvoooo")                            cursor2.callproc('getallTrainInvoiceActionLog', [invoice_id])                            invoicess = dictfetchall(cursor2)                            e['InvoiceActionLog'] = invoicess                            cursor2.close()                        e['booking_type'] = booking_type                    data = {'success': 1, 'Bookings': emp, 'booking_type':booking_type}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def accept_train_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('acceptTrainBooking', [booking_id,user_id,user_type])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Train Booking Accepted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def reject_train_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('rejectTrainBooking', [booking_id,user_id,user_type,user_comment])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Train Booking Reject Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def assign_train_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        train_name = request.POST.get('train_name', '')        ticket_no = request.POST.get('ticket_no', '')        pnr_no = request.POST.get('pnr_no', '')        assign_bus_type_id = request.POST.get('assign_bus_type_id', '')        seat_no = request.POST.getlist('seat_no', '')        coach = request.POST.getlist('coach', '')        employee_id = request.POST.getlist('employee_id', '')        portal_used = request.POST.get('portal_used', '')        quota_used = request.POST.get('quota_used', '')        operator_name = request.POST.get('operator_name', '')        operator_contact = request.POST.get('operator_contact', '')        boarding_point = request.POST.get('boarding_point', '')        boarding_datetime = request.POST.get('boarding_datetime', '')        boarding_datetime = datetime.datetime.strptime(boarding_datetime, '%d-%m-%Y %H:%M')        ticket_price = request.POST.get('ticket_price', '')        management_fee = request.POST.get('management_fee', '')        tax_mng_amt = request.POST.get('tax_mng_amt', '')        tax_on_management_fee = request.POST.get('tax_on_management_fee', '')        tax_on_management_fee_percentage = request.POST.get('tax_on_management_fee_percentage', '')        sub_total = request.POST.get('sub_total', '')        management_fee_igst = request.POST.get('management_fee_igst', '')        management_fee_cgst = request.POST.get('management_fee_cgst', '')        management_fee_sgst = request.POST.get('management_fee_sgst', '')        management_fee_igst_rate = request.POST.get('management_fee_igst_rate', '')        management_fee_cgst_rate = request.POST.get('management_fee_cgst_rate', '')        management_fee_sgst_rate = request.POST.get('management_fee_sgst_rate', '')        cgst = request.POST.get('cgst', '')        sgst = request.POST.get('sgst', '')        igst = request.POST.get('igst', '')        cotrav_billing_entity = request.POST.get('cotrav_billing_entity', '')        tax_on_management_fee = tax_mng_amt;        client_ticket_path = request.POST.get('client_ticket_path')        is_client_sms = request.POST.get('is_client_sms', '')        is_client_email = request.POST.get('is_client_email', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('assignTrainBooking', [ticket_no,pnr_no,assign_bus_type_id,1,portal_used,operator_name,operator_contact,boarding_point,boarding_datetime,booking_id,user_id,user_type,train_name,ticket_price,management_fee,tax_on_management_fee,tax_on_management_fee_percentage,sub_total,cotrav_billing_entity,igst,cgst,sgst,management_fee_igst,management_fee_cgst,management_fee_sgst,management_fee_igst_rate,management_fee_cgst_rate,management_fee_sgst_rate,tax_mng_amt,client_ticket_path,quota_used])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        for xx in range(len(employee_id)):                            cursor26 = connection.cursor()                            cursor26.callproc('updateTrainSeatNo', [str(coach[xx])+str("-")+str(seat_no[xx]), employee_id[xx], booking_id])                            result = dictfetchall(cursor26)                            cursor26.close()                        cursor2 = connection.cursor()                        cursor2.callproc('viewTrainBooking', [booking_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        cursor1 = connection.cursor()                        cursor1.callproc('getAllTrainBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        emp[0]['Passangers'] = passanger                        cursor1.close()                        fcm = FCM()                        thread = Thread(target=fcm.send_notification, args=(emp, "Train"))                        thread.start()                        add_booking_email = Assign_Booking_Email()                        if is_client_sms:                            thread = Thread(target=add_booking_email.send_client_sms, args=(emp, "Train"))                            thread.start()                            #resp1 = add_booking_email.send_client_sms(emp, "Train")                        if is_client_email:                            thread = Thread(target=add_booking_email.is_client_email, args=(emp, "Train", client_ticket_path))                            thread.start()                            #resp1 = add_booking_email.is_client_email(emp, "Train", client_ticket_path)                        data = {'success': 1, 'message': "Train Booking Assign Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)################################################### Hotels  #############################def agent_hotel_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_type = request.POST.get('booking_type', '')        page_no = request.POST.get('page_no', '')        limit_from = 0        limit_to = 0        print(page_no)        if page_no:            limit_from = (int(page_no) - 1) * 10            limit_to = 10        else:            limit_from = 0            limit_to = 2147483647        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                cursor = connection.cursor()                cursor.callproc('getAllAgentHotelBookings', [booking_type,limit_from,limit_to,user.id])                emp = dictfetchall(cursor)                cursor.close()                for e in emp:                    try:                        cursor1 = connection.cursor()                        booking_id = e['id']                        print(booking_id)                        cursor1.callproc('getAllHotelBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        e['Passangers'] = passanger                        cursor1.close()                        cursor2 = connection.cursor()                        cursor2.callproc('getAllTrackingStatusByBookingID', [4, booking_id])                        flights = dictfetchall(cursor2)                        e['TrackingStatus'] = flights                        cursor2.close()                        if e['is_invoice']:                            cursor2 = connection.cursor()                            invoice_id = e['invoice_id']                            print(invoice_id)                            print("iiiiiiinnnnnvvvvvoooo")                            cursor2.callproc('getallHotelInvoiceActionLog', [invoice_id])                            invoicess = dictfetchall(cursor2)                            e['InvoiceActionLog'] = invoicess                            cursor2.close()                        e['booking_type'] = booking_type                                            except Exception as e:                        data = {'success': 0, 'message': getattr(e, 'message', str(e))}                        return JsonResponse(data)                data = {'success': 1, 'Bookings': emp, 'booking_type':booking_type}                return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def accept_hotel_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('acceptHotelBooking', [booking_id,user_id,user_type])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Hotel Booking Accepted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def reject_hotel_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('rejectHotelBooking', [booking_id,user_id,user_type,user_comment])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Hotel Booking Reject Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def assign_hotel_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        assign_hotel_id = request.POST.get('assign_hotel_id', '')        assign_room_type = request.POST.get('assign_room_type', '')        no_of_days = request.POST.get('no_of_days', '')        total_room_price = request.POST.get('total_room_price', '')        voucher_number = request.POST.get('voucher_number', '')        portal_used = request.POST.get('portal_used', '')        commission_earned = request.POST.get('commission_earned', '')        is_ac_room = request.POST.get('is_ac_room', '')        daily_brakefast = request.POST.get('daily_brakefast', '')        is_prepaid = request.POST.get('is_prepaid', '')        agent_booking_id = request.POST.get('agent_booking_id', '')        comment = request.POST.get('comment', '')        ticket_price = request.POST.get('ticket_price', '')        management_fee = request.POST.get('management_fee', '')        tax_mng_amt = request.POST.get('tax_mng_amt', '')        tax_on_management_fee = request.POST.get('tax_on_management_fee', '')        tax_on_management_fee_percentage = request.POST.get('tax_on_management_fee_percentage', '')        sub_total = request.POST.get('sub_total', '')        management_fee_igst = request.POST.get('management_fee_igst', '')        management_fee_cgst = request.POST.get('management_fee_cgst', '')        management_fee_sgst = request.POST.get('management_fee_sgst', '')        management_fee_igst_rate = request.POST.get('management_fee_igst_rate', '')        management_fee_cgst_rate = request.POST.get('management_fee_cgst_rate', '')        management_fee_sgst_rate = request.POST.get('management_fee_sgst_rate', '')        cgst = request.POST.get('cgst', '')        sgst = request.POST.get('sgst', '')        igst = request.POST.get('igst', '')        cotrav_billing_entity = request.POST.get('oper_cotrav_billing_entity', '')        tax_mng_amt = 100        oper_ticket_price = request.POST.get('oper_ticket_price', '')        oper_commission = request.POST.get('oper_commission', '')        oper_commission_type = request.POST.get('oper_commission_type', '')        oper_cotrav_billing_entity = request.POST.get('oper_cotrav_billing_entity', '')        oper_cgst = request.POST.get('oper_cgst', '')        oper_sgst = request.POST.get('oper_sgst', '')        oper_igst = request.POST.get('oper_igst', '')        igst_amount = request.POST.get('igst_amount', '')        cgst_amount = request.POST.get('cgst_amount', '')        sgst_amount = request.POST.get('sgst_amount', '')        client_ticket = request.POST.get('client_ticket')        client_ticket_path = request.POST.get('client_ticket_path')        vender_ticket_path = request.POST.get('vender_ticket_path')        if not client_ticket_path:            client_ticket = 1        is_client_sms = request.POST.get('is_client_sms', '')        is_client_email = request.POST.get('is_client_email', '')        is_mobile = request.POST.get('is_mobile', '')        if not is_mobile:            is_mobile =0        if (is_mobile == 1):            corporate_id = request.POST.get('corporate_id', '')            service_type = 6            cotrav_billing_entity = request.POST.get('cotrav_billing_entity', '')            corporate_billing_entity = request.POST.get('corporate_billing_entity', '')            ticket_price = request.POST.get('ticket_price', '')            no_of_passanger = request.POST.get('ticket_price', '')            oper_ticket_price = request.POST.get('oper_ticket_price', '')            oper_cotrav_billing_entity = request.POST.get('oper_cotrav_billing_entity', '')            oper_billing_entity = request.POST.get('oper_billing_entity', '')            oper_commission = request.POST.get('oper_commission', '')            oper_commission_type = request.POST.get('oper_commission_type', '')            tx = TaxCalc(corporateid=corporate_id, service_type=service_type,                         cotrav_billing_entity=cotrav_billing_entity,                         corporate_billing_entity=corporate_billing_entity, ticket_price=ticket_price,                         no_of_passanger=no_of_passanger, oper_ticket_price=oper_ticket_price,                         oper_cotrav_billing_entity=oper_cotrav_billing_entity, oper_billing_entity=oper_billing_entity)            txx = tx.taxOnManagement()            if (service_type == 6):                txxx = tx.hotel_gst()            else:                txxx = tx.gst()            total_billing_amount = tx.total_billing_amount()            operator_calc = tx.oper_tax_calc()            details = tx.detailTax()            ticket_price = details['ticket_price']            management_fee = details['management_fee']            tax_mng_amt = details['tax_on_management_fee']            tax_on_management_fee = details['tax_on_management_fee']            tax_on_management_fee_percentage = details['tax_on_management_fee_percentage']            sub_total = details['sub_total']            management_fee_igst = details['management_fee_igst']            management_fee_cgst = details['management_fee_sgst']            management_fee_sgst = details['management_fee_sgst']            management_fee_igst_rate = details['management_fee_igst_rate']            management_fee_cgst_rate = details['management_fee_cgst_rate']            management_fee_sgst_rate = details['management_fee_sgst_rate']            cgst = details['cgst']            sgst = details['sgst']            igst = details['igst']            oper_cgst = details['oper_cgst']            oper_sgst = details['oper_sgst']            oper_igst = details['oper_igst']            igst_amount = details['oper_igst_amount']            cgst_amount = details['oper_cgst_amount']            sgst_amount = details['oper_sgst_amount']        else:            ticket_price = request.POST.get('ticket_price', '')            management_fee = request.POST.get('management_fee', '')            tax_mng_amt = request.POST.get('tax_mng_amt', '')            tax_on_management_fee = request.POST.get('tax_on_management_fee', '')            tax_on_management_fee_percentage = request.POST.get('tax_on_management_fee_percentage', '')            sub_total = request.POST.get('sub_total', '')            management_fee_igst = request.POST.get('management_fee_igst', '')            management_fee_cgst = request.POST.get('management_fee_cgst', '')            management_fee_sgst = request.POST.get('management_fee_sgst', '')            management_fee_igst_rate = request.POST.get('management_fee_igst_rate', '')            management_fee_cgst_rate = request.POST.get('management_fee_cgst_rate', '')            management_fee_sgst_rate = request.POST.get('management_fee_sgst_rate', '')            cgst = request.POST.get('cgst', '')            sgst = request.POST.get('sgst', '')            igst = request.POST.get('igst', '')            cotrav_billing_entity = request.POST.get('oper_cotrav_billing_entity', '')            tax_mng_amt = 100            oper_ticket_price = request.POST.get('oper_ticket_price', '')            oper_commission = request.POST.get('oper_commission', '')            oper_commission_type = request.POST.get('oper_commission_type', '')            oper_cotrav_billing_entity = request.POST.get('oper_cotrav_billing_entity', '')            oper_cgst = request.POST.get('oper_cgst', '')            oper_sgst = request.POST.get('oper_sgst', '')            oper_igst = request.POST.get('oper_igst', '')            igst_amount = request.POST.get('igst_amount', '')            cgst_amount = request.POST.get('cgst_amount', '')            sgst_amount = request.POST.get('sgst_amount', '')        if commission_earned:            pass        else:            commission_earned = 0        if agent_booking_id:            pass        else:            agent_booking_id = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('assignHotelBooking', [assign_hotel_id,assign_room_type,is_ac_room,daily_brakefast,is_prepaid,agent_booking_id,                     comment,booking_id,user_id,user_type,total_room_price,voucher_number,portal_used, commission_earned,ticket_price,management_fee,                      tax_on_management_fee,tax_on_management_fee_percentage,sub_total,cotrav_billing_entity,igst,cgst,sgst,management_fee_igst,                       management_fee_cgst,management_fee_sgst,management_fee_igst_rate,management_fee_cgst_rate,management_fee_sgst_rate,tax_mng_amt,                      oper_ticket_price,oper_commission,oper_commission_type,oper_igst,oper_cgst,oper_sgst,client_ticket_path,vender_ticket_path,                       igst_amount,cgst_amount,sgst_amount,no_of_days])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        cursor2 = connection.cursor()                        cursor2.callproc('viewHotelBooking', [booking_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        cursor1 = connection.cursor()                        cursor1.callproc('getAllHotelBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        emp[0]['Passangers'] = passanger                        cursor1.close()                        get_voucher_path = ''                        print(client_ticket)                        if client_ticket:                            voucher = emp[0]                            bus_pdf = Hotel(voucher)                            get_vou = bus_pdf.get(request)                            payin_slip = get_vou[0]                            get_voucher_path = os.path.join(os.path.abspath(os.path.dirname("__file__")), "media//Email_Voucher_PDF", payin_slip)                            cursor11 = connection.cursor()                            cursor11.callproc('uploadNewClientVendorTicket',                                              [booking_id, user_id, user_type, 4, 1, get_voucher_path])                            company = dictfetchall(cursor11)                        else:                            get_voucher_path = client_ticket_path                        fcm = FCM()                        thread = Thread(target=fcm.send_notification, args=(emp, "Hotel"))                        thread.start()                        add_booking_email = Assign_Booking_Email()                        if is_client_sms:                            thread = Thread(target=add_booking_email.send_client_sms, args=(emp, "Hotel"))                            thread.start()                            #resp1 = add_booking_email.send_client_sms(emp, "Hotel")                        if is_client_email:                            thread = Thread(target=add_booking_email.is_client_email, args=(emp, "Hotel", get_voucher_path))                            thread.start()                            #resp1 = add_booking_email.is_client_email(emp, "Hotel", get_voucher_path)                        data = {'success': 1, 'message': "Hotel Booking Assign Successfully"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)################################################### Flight  #############################def agent_flight_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_type = request.POST.get('booking_type', '')        page_no = request.POST.get('page_no', '')        limit_from = 0        limit_to = 0        print(page_no)        if page_no:            limit_from = (int(page_no) - 1) * 10            limit_to = 10        else:            limit_from = 0            limit_to = 2147483647        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                cursor = connection.cursor()                cursor.callproc('getAllAgentFlightBookings', [booking_type,limit_from,limit_to,user.id])                emp = dictfetchall(cursor)                cursor.close()                for e in emp:                    try:                        cursor1 = connection.cursor()                        booking_id = e['id']                        print(booking_id)                        cursor1.callproc('getAllFlightBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        e['Passangers'] = passanger                        cursor1.close()                        cursor2 = connection.cursor()                        cursor2.callproc('getAllTrackingStatusByBookingID', [5, booking_id])                        flights = dictfetchall(cursor2)                        e['TrackingStatus'] = flights                        cursor2.close()                        if e['is_invoice']:                            cursor2 = connection.cursor()                            invoice_id = e['invoice_id']                            print(invoice_id)                            print("iiiiiiinnnnnvvvvvoooo")                            cursor2.callproc('getallFlightInvoiceActionLog', [invoice_id])                            invoicess = dictfetchall(cursor2)                            e['InvoiceActionLog'] = invoicess                            cursor2.close()                        e['booking_type'] = booking_type                    except Exception as e:                        data = {'success': 0, 'message': getattr(e, 'message', str(e))}                        return JsonResponse(data)                data = {'success': 1, 'Bookings': emp, 'booking_type':booking_type}                return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def accept_flight_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('acceptFlightBooking', [booking_id,user_id,user_type])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Flight Booking Accept Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def reject_flight_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('rejectFlightBooking', [booking_id,user_id,user_type,user_comment])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Flight Booking Reject Successfully"}                    cursor.close()                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def assign_flight_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        no_of_passanger = request.POST.get('no_of_passanger', '')        finalpass = int(no_of_passanger)        operator_id = request.POST.get('operator_id', '')        meal_is_include = request.POST.get('meal_is_include', '')        fare_type = request.POST.get('fare_type', '')        trip_type = request.POST.get('trip_type', '')        flight_type = request.POST.get('flight_type', '')        seat_type = request.POST.get('seat_type', '')        no_of_stops = request.POST.get('no_of_stops', '')        no_of_stop_rt = request.POST.get('no_of_stop_rt', '')        final_no_of_stop = int(no_of_stops)        if not no_of_stop_rt:            no_of_stop_rt = -1        final_no_of_stop_rt = int(no_of_stop_rt)        ticket_number = request.POST.getlist('ticket_no', '')        employee_booking_id = request.POST.getlist('employee_booking_id', '')        flight_from = request.POST.getlist('flight_from', '')        flight_from = list(filter(None, flight_from))        flight_to = request.POST.getlist('flight_to', '')        flight_to = list(filter(None, flight_to))        departure_time = request.POST.getlist('departure_time', '')        departure_time = list(filter(None, departure_time))        arrival_time = request.POST.getlist('arrival_time', '')        arrival_time = list(filter(None, arrival_time))        flight_name = request.POST.getlist('flight_name', '')        flight_name = list(filter(None, flight_name))        flight_no = request.POST.getlist('flight_no', '')        flight_no = list(filter(None, flight_no))        pnr_no = request.POST.getlist('pnr_no', '')        pnr_no = list(filter(None, pnr_no))        is_return_flight = request.POST.getlist('is_return_flight', '')        is_return_flight = list(filter(None, is_return_flight))        client_ticket_path = request.POST.get('client_ticket_path')        client_ticket = request.POST.get('client_ticket')        vender_ticket_path = request.POST.get('vender_ticket_path')        vendor_booking_id = request.POST.get('vendor_booking_id')        if not client_ticket_path:            client_ticket = 1        is_client_sms = request.POST.get('is_client_sms', '')        is_client_email = request.POST.get('is_client_email', '')        if is_return_flight:            pass        else:            is_return_flight = '0'        ##################        is_mobile = int(request.POST.get('is_mobile', '0'))        if (is_mobile == 1):            corporate_id = request.POST.get('corporate_id', '')            service_type = 7            cotrav_billing_entity = request.POST.get('cotrav_billing_entity', '')            corporate_billing_entity = request.POST.get('corporate_billing_entity', '')            ticket_price = request.POST.get('ticket_price', '')            no_of_passanger = request.POST.get('ticket_price', '')            oper_ticket_price = request.POST.get('oper_ticket_price', '')            oper_cotrav_billing_entity = request.POST.get('oper_cotrav_billing_entity', '')            oper_billing_entity = request.POST.get('oper_billing_entity', '')            oper_commission = request.POST.get('oper_commission', '')            oper_commission_type = request.POST.get('oper_commission_type', '')            tx = TaxCalc(corporateid=corporate_id, service_type=service_type,                         cotrav_billing_entity=cotrav_billing_entity,                         corporate_billing_entity=corporate_billing_entity, ticket_price=ticket_price,                         no_of_passanger=no_of_passanger, oper_ticket_price=oper_ticket_price,                         oper_cotrav_billing_entity=oper_cotrav_billing_entity, oper_billing_entity=oper_billing_entity)            txx = tx.taxOnManagement()            if (service_type == 6):                txxx = tx.hotel_gst()            else:                txxx = tx.gst()            total_billing_amount = tx.total_billing_amount()            operator_calc = tx.oper_tax_calc()            details = tx.detailTax()            ticket_price = details['ticket_price']            management_fee = details['management_fee']            tax_mng_amt = details['tax_on_management_fee']            tax_on_management_fee = details['tax_on_management_fee']            tax_on_management_fee_percentage = details['tax_on_management_fee_percentage']            sub_total = details['sub_total']            management_fee_igst = details['management_fee_igst']            management_fee_cgst = details['management_fee_sgst']            management_fee_sgst = details['management_fee_sgst']            management_fee_igst_rate = details['management_fee_igst_rate']            management_fee_cgst_rate = details['management_fee_cgst_rate']            management_fee_sgst_rate = details['management_fee_sgst_rate']            cgst = details['cgst']            sgst = details['sgst']            igst = details['igst']            oper_cgst = details['oper_cgst']            oper_sgst = details['oper_sgst']            oper_igst = details['oper_igst']            igst_amount = details['oper_igst_amount']            cgst_amount = details['oper_cgst_amount']            sgst_amount = details['oper_sgst_amount']        else:            ticket_price = request.POST.get('ticket_price', '')            management_fee = request.POST.get('management_fee', '')            tax_mng_amt = request.POST.get('tax_mng_amt', '')            tax_on_management_fee = request.POST.get('tax_on_management_fee', '')            tax_on_management_fee_percentage = request.POST.get('tax_on_management_fee_percentage', '')            sub_total = request.POST.get('sub_total', '')            management_fee_igst = request.POST.get('management_fee_igst', '')            management_fee_cgst = request.POST.get('management_fee_cgst', '')            management_fee_sgst = request.POST.get('management_fee_sgst', '')            management_fee_igst_rate = request.POST.get('management_fee_igst_rate', '')            management_fee_cgst_rate = request.POST.get('management_fee_cgst_rate', '')            management_fee_sgst_rate = request.POST.get('management_fee_sgst_rate', '')            cgst = request.POST.get('cgst', '')            sgst = request.POST.get('sgst', '')            igst = request.POST.get('igst', '')            cotrav_billing_entity = request.POST.get('cotrav_billing_entity', '')            tax_on_management_fee = tax_mng_amt;            oper_ticket_price = request.POST.get('oper_ticket_price', '')            oper_commission = request.POST.get('oper_commission', '')            oper_commission_type = request.POST.get('oper_commission_type', '')            oper_cotrav_billing_entity = request.POST.get('oper_cotrav_billing_entity', '')            oper_cgst = request.POST.get('oper_cgst', '')            oper_sgst = request.POST.get('oper_sgst', '')            oper_igst = request.POST.get('oper_igst', '')            igst_amount = request.POST.get('igst_amount', '')            cgst_amount = request.POST.get('cgst_amount', '')            sgst_amount = request.POST.get('sgst_amount', '')        #####################        print("Stop")        print(flight_from)        print(final_no_of_stop)        final_no_of_stop = int(final_no_of_stop+1)        final_no_of_stop_rt = int(final_no_of_stop_rt+1)        print(final_no_of_stop)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    print("i m here")                    cursor.callproc('assignFlightBooking', [flight_type,seat_type,trip_type,no_of_stops,booking_id,meal_is_include,fare_type,user_id,user_type,ticket_price,management_fee,tax_on_management_fee,tax_on_management_fee_percentage,sub_total,cotrav_billing_entity,igst,cgst,sgst,management_fee_igst,management_fee_cgst,management_fee_sgst,management_fee_igst_rate,management_fee_cgst_rate,management_fee_sgst_rate,tax_mng_amt,oper_ticket_price,oper_commission,oper_commission_type,oper_cotrav_billing_entity,oper_igst,oper_cgst,oper_sgst,client_ticket_path,vender_ticket_path,igst_amount,cgst_amount,sgst_amount,operator_id,vendor_booking_id])                    result = dictfetchall(cursor)                    cursor.close()                    for x in range(final_no_of_stop):                        cursor1 = connection.cursor()                        print("Time date")                        print(x)                        print(departure_time[x])                        print(arrival_time[x])                        departure_time[x] = datetime.datetime.strptime(departure_time[x], '%d-%m-%Y %H:%M')                        arrival_time[x] = datetime.datetime.strptime(arrival_time[x], '%d-%m-%Y %H:%M')                        flight_name = flight_name[x].replace(" ", "")                        cursor1.callproc('addFlightBookingFlights',[flight_name, flight_no[x], pnr_no[x], flight_from[x], flight_to[x], departure_time[x], arrival_time[x], booking_id, user_id, user_type, is_return_flight[0]])                        result = dictfetchall(cursor1)                        cursor1.close()                    print("print outside for")                    if final_no_of_stop_rt >= 1:                        last_stop = int(final_no_of_stop_rt+final_no_of_stop)                        for x in range(final_no_of_stop, last_stop):                            cursor1 = connection.cursor()                            print("Time date")                            print(x)                            print(departure_time[x])                            print(arrival_time[x])                            departure_time[x] = datetime.datetime.strptime(departure_time[x], '%d-%m-%Y %H:%M')                            arrival_time[x] = datetime.datetime.strptime(arrival_time[x], '%d-%m-%Y %H:%M')                            flight_name = flight_name[x].replace(" ", "")                            cursor1.callproc('addFlightBookingFlights',[flight_name, flight_no[x], pnr_no[x], flight_from[x], flight_to[x], departure_time[x], arrival_time[x], booking_id, user_id, user_type, 1])                            result = dictfetchall(cursor1)                            cursor1.close()                    for xx in range(finalpass):                        print("1i m here")                        print(employee_booking_id[0])                        print(booking_id)                        print("herer 2")                        cursor2 = connection.cursor()                        cursor2.callproc('updateFlightPassangerTickectNo',[ticket_number[xx],employee_booking_id[xx],booking_id])                        result = dictfetchall(cursor2)                        cursor2.close()                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        cursor2 = connection.cursor()                        cursor2.callproc('viewFlightBooking', [booking_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        cursor1 = connection.cursor()                        cursor1.callproc('getAllFlightBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        emp[0]['Passangers'] = passanger                        cursor1.close()                        cursor2 = connection.cursor()                        cursor2.callproc('getAllFlightBookingFlights', [booking_id])                        flights = dictfetchall(cursor2)                        cursor2.close()                        emp[0]['Flights'] = flights                        DEP_DATE_0 = ''                        for i, f in enumerate(flights):                            print(f)                            ARRV_DATE_i = f['arrival_datetime']                            DEP_DATE_i = f['departure_datetime']                            adDate = datetime.datetime.strptime(str(DEP_DATE_i), "%d-%m-%Y %H:%M")                            ddDate = datetime.datetime.strptime(str(ARRV_DATE_i), "%d-%m-%Y %H:%M")                            dayHours_onword_i = timesince(adDate, ddDate)                            if i == 0:                                DEP_DATE_0 = f['arrival_datetime']                            if i == 1 or i == 2 or i == 3:                                ii = i - 1                                adDate = datetime.datetime.strptime(str(DEP_DATE_0), "%d-%m-%Y %H:%M")                                ddDate = datetime.datetime.strptime(str(DEP_DATE_i), "%d-%m-%Y %H:%M")                                emp[0]['DELAY_' + str(i)] = timesince(adDate, ddDate)                                DEP_DATE_0 = f['arrival_datetime']                            emp[0]['DURATION_' + str(i)] = dayHours_onword_i                        get_voucher_path = ''                        if client_ticket:                            voucher = emp[0]                            bus_pdf = Flight(voucher)                            get_vou = bus_pdf.get(request)                            payin_slip = get_vou[0]                            get_voucher_path = os.path.join(os.path.abspath(os.path.dirname("__file__")), "media//Email_Voucher_PDF", payin_slip)                            cursor11 = connection.cursor()                            cursor11.callproc('uploadNewClientVendorTicket',                                              [booking_id, user_id, user_type, 5, 1, get_voucher_path])                            company = dictfetchall(cursor11)                        else:                            get_voucher_path = client_ticket_path                        fcm = FCM()                        thread = Thread(target=fcm.send_notification, args=(emp, "Flight"))                        thread.start()                        add_booking_email = Assign_Booking_Email()                        if is_client_sms:                            thread = Thread(target=add_booking_email.send_client_sms, args=(emp, "Flight"))                            thread.start()                            #resp1 = add_booking_email.send_client_sms(emp, "Flight")                        if is_client_email:                            thread = Thread(target=add_booking_email.is_client_email, args=(emp, "Flight", get_voucher_path))                            thread.start()                            #resp1 = add_booking_email.is_client_email(emp, "Flight", get_voucher_path)                        data = {'success': 1, 'message': "Flight Booking Assign Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    print(e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)#########################################3def get_city_id(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        post_str = request.POST.get('search_string')        my_list = post_str.split(",")        li = []        for i in my_list:            v = i.strip()            li.append(v)        search_str = ",".join(map(str, li))        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getCityId', [search_str])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'city_id': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def cancel_flight_booking_passengers(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        refund_amount = request.POST.get('refund_amount', '')        cancel_comment = request.POST.get('cancel_comment', '')        employees = request.POST.getlist('employees', '')        employees = ",".join(employees)        old_ticket_price = request.POST.get('old_ticket_price', '')        ticket_price = request.POST.get('ticket_price', '')        management_fee = request.POST.get('management_fee', '')        tax_mng_amt = request.POST.get('tax_mng_amt', '')        tax_on_management_fee = request.POST.get('tax_on_management_fee', '')        tax_on_management_fee_percentage = request.POST.get('tax_on_management_fee_percentage', '')        sub_total = request.POST.get('sub_total', '')        management_fee_igst = request.POST.get('management_fee_igst', '')        management_fee_cgst = request.POST.get('management_fee_cgst', '')        management_fee_sgst = request.POST.get('management_fee_sgst', '')        management_fee_igst_rate = request.POST.get('management_fee_igst_rate', '')        management_fee_cgst_rate = request.POST.get('management_fee_cgst_rate', '')        management_fee_sgst_rate = request.POST.get('management_fee_sgst_rate', '')        cgst = request.POST.get('cgst', '')        sgst = request.POST.get('sgst', '')        igst = request.POST.get('igst', '')        igst_amount = request.POST.get('igst_amount', '')        cgst_amount = request.POST.get('cgst_amount', '')        sgst_amount = request.POST.get('sgst_amount', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('cancelFlightBookingPassanger', [booking_id,user_id,user_type,ticket_price,management_fee,tax_on_management_fee,                    tax_on_management_fee_percentage,sub_total,igst,cgst,sgst,management_fee_igst,management_fee_cgst,management_fee_sgst,                    management_fee_igst_rate,management_fee_cgst_rate,management_fee_sgst_rate,tax_mng_amt,igst_amount,cgst_amount,sgst_amount,old_ticket_price,                    refund_amount,cancel_comment,employees])                    emp = dictfetchall(cursor)                    print(emp)                    cursor.close()                    data = {'success': 1, 'city_id': emp}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_verify_taxi_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id in zip(verify_id, corporate_ids, invoice_ids):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('verifyInvoiceAgentTaxiBookings', [booking_id,user_id,user_type,corporate_id,invoice_id])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Verify Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_revise_taxi_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('correctionInvoiceAgentTaxiBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Revise Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_verify_bus_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id in zip(verify_id, corporate_ids, invoice_ids):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('verifyInvoiceAgentBusBookings', [booking_id,user_id,user_type,corporate_id,invoice_id])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Verify Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_revise_bus_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('correctionInvoiceAgentBusBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Revise Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_verify_train_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id in zip(verify_id, corporate_ids, invoice_ids):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('verifyInvoiceAgentTrainBookings', [booking_id,user_id,user_type,corporate_id,invoice_id])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Verify Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_revise_train_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('correctionInvoiceAgentTrainBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Revise Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_verify_hotel_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id in zip(verify_id, corporate_ids, invoice_ids):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('verifyInvoiceAgentHotelBookings', [booking_id,user_id,user_type,corporate_id,invoice_id])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Verify Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_revise_hotel_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('correctionInvoiceAgentHotelBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Revise Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_verify_flight_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id in zip(verify_id, corporate_ids, invoice_ids):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('verifyInvoiceAgentFlightBookings', [booking_id,user_id,user_type,corporate_id,invoice_id])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Verify Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_revise_flight_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('correctionInvoiceAgentFlightBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Revise Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_update_taxi_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('updateInvoiceAgentTaxiBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Updated Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_update_bus_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('updateInvoiceAgentBusBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Updated Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_update_train_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('updateInvoiceAgentTrainBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Updated Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_update_hotel_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('updateInvoiceAgentHotelBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Updated Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def agent_update_flight_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        verify_id = request.POST.getlist('verify_id', '')        corporate_ids = request.POST.getlist('corporate_id', '')        invoice_ids = request.POST.getlist('invoice_id', '')        invoice_comments = request.POST.getlist('invoice_comments', '')        user_id = request.POST.get('user_id', '')        print(verify_id)        print(corporate_ids)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    for booking_id, corporate_id, invoice_id, invoice_comment in zip(verify_id, corporate_ids, invoice_ids, invoice_comments):                        print(booking_id)                        print(corporate_id)                        cursor.callproc('updateInvoiceAgentFlightBookings', [booking_id,user_id,user_type,corporate_id,invoice_id,invoice_comment])                        emp = dictfetchall(cursor)                        print(emp)                    cursor.close()                    data = {'success': 1, 'message': "invoice Updated Successfully"}                    return JsonResponse(data)                except Exception as e:                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def dashboard_sales_by_month(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        month = request.POST.get('month', '')        year = request.POST.get('year', '')        print("month and year")        print(month)        print(year)        flag_taxi = 0        flag_bus = 0        flag_train = 0        flag_flight = 0        flag_hotel = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            rm = user.is_relationship_manager            om = user.is_operation_manager            sa = user.is_super_admin            if (sa):                agent_user_type = 101            elif (rm):                agent_user_type = 102            elif (om):                agent_user_type = 103            else:                agent_user_type = 101            print('agent_user_type')            print(agent_user_type)            print(rm)            print(om)            print(sa)            if user:                try:                    if agent_user_type == 103:                        cursor = connection.cursor()                        cursor.callproc('getOmAgentDetails', [user.id])                        om_user = dictfetchall(cursor)                        cursor.close()                        print(om_user)                        for om_u in om_user:                            service_type_id = om_u['service_type_id']                            print('service_type_id_is')                            print(service_type_id)                            if (service_type_id == 1):                                flag_taxi = 1                            elif (service_type_id == 2):                                flag_bus = 1                            elif (service_type_id == 3):                                flag_train = 1                            elif (service_type_id == 4):                                flag_flight = 1                            elif (service_type_id == 5):                                flag_hotel = 1                    else:                        flag_taxi = 1                        flag_bus = 1                        flag_train = 1                        flag_flight = 1                        flag_hotel = 1                    cursor = connection.cursor()                    cursor.callproc('getSalesByMonth', [year,month , agent_user_type , 0 , user.id , flag_taxi , flag_bus , flag_train , flag_flight , flag_hotel  ])                    emp = dictfetchall(cursor)                    cursor.close()                    print('### sales data ###')                    print(emp)                    #emp = {'taxi':43,'bus':73,'train':86,'flight':62,'hotel':77}                    data = {'success': 1, 'Sales': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def master_select_record(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        tableName = request.POST.get('table_name', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('masterSelectRecord', [tableName])                    emp = dictfetchall(cursor)                    cursor.close()                    print('responce is')                    #print(emp)                    data = {'success': 1 ,'Records':emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def master_add_record(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        tableName = request.POST.get('table_name', '')        col_name = request.POST.get('col_name', '')        col_value = request.POST.get('col_value', '')        print('colomn name')        print(col_name)        print('coloumn value')        print(col_value)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('masterAddRecord', [tableName,col_name,col_value ])                    emp = dictfetchall(cursor)                    cursor.close()                    print('responce is')                    #print(emp)                    data = {'success': 1 }                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def master_update_record(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        tableName = request.POST.get('table_name', '')        set_clause = request.POST.get('set_clause', '')        record_id = request.POST.get('record_id', '')        print('set_clause')        print(set_clause)        print('record_id')        print(record_id)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('masterUpdateRecords', [tableName,set_clause,record_id ])                    emp = dictfetchall(cursor)                    cursor.close()                    print('responce is')                    print(emp)                    data = {'success': 1 , 'record': emp }                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def dashboard_bookings_by_month(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        month = request.POST.get('month', '')        year = request.POST.get('year', '')        print("month and year")        print(month)        print(year)        flag_taxi = 0        flag_bus = 0        flag_train = 0        flag_flight = 0        flag_hotel = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            rm = user.is_relationship_manager            om = user.is_operation_manager            sa = user.is_super_admin            if (sa):                agent_user_type = 101            elif (rm):                agent_user_type = 102            elif (om):                agent_user_type = 103            else:                agent_user_type = 101            print('agent_user_type')            print(agent_user_type)            print(rm)            print(om)            print(sa)            if user:                try:                    if agent_user_type == 103:                        cursor = connection.cursor()                        cursor.callproc('getOmAgentDetails', [user.id])                        om_user = dictfetchall(cursor)                        cursor.close()                        print(om_user)                        for om_u in om_user:                            service_type_id = om_u['service_type_id']                            print('service_type_id_is')                            print(service_type_id)                            if (service_type_id == 1):                                flag_taxi = 1                            elif (service_type_id == 2):                                flag_bus = 1                            elif (service_type_id == 3):                                flag_train = 1                            elif (service_type_id == 4):                                flag_flight = 1                            elif (service_type_id == 5):                                flag_hotel = 1                    else:                        flag_taxi = 1                        flag_bus = 1                        flag_train = 1                        flag_flight = 1                        flag_hotel = 1                    cursor = connection.cursor()                    cursor.callproc('getDashboardBookingsByMonth', [year,month , agent_user_type , 0 , user.id , flag_taxi , flag_bus , flag_train , flag_flight , flag_hotel])                    emp = dictfetchall(cursor)                    cursor.close()                    print('### sales data ###')                    print(emp)                    #emp = {'taxi':43,'bus':73,'train':86,'flight':62,'hotel':77}                    data = {'success': 1, 'Sales': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def dashboard_sales_for_six_months(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        month = int(request.POST.get('month', ''))        year = int(request.POST.get('year', ''))        print("month and year")        print(month)        print(year)        dt_date = datetime.datetime(year, month, 25)        print(dt_date)        flag_taxi = 0        flag_bus = 0        flag_train = 0        flag_flight = 0        flag_hotel = 0        taxi = {}        bus = {}        train = {}        flight = {}        hotel = {}        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            rm = user.is_relationship_manager            om = user.is_operation_manager            sa = user.is_super_admin            if (sa):                agent_user_type = 101            elif (rm):                agent_user_type = 102            elif (om):                agent_user_type = 103            else:                agent_user_type = 101            print('agent_user_type')            print(agent_user_type)            print(rm)            print(om)            print(sa)            if user:                try:                    if agent_user_type == 103:                        cursor = connection.cursor()                        cursor.callproc('getOmAgentDetails', [user.id])                        om_user = dictfetchall(cursor)                        cursor.close()                        print(om_user)                        for om_u in om_user:                            service_type_id = om_u['service_type_id']                            print('service_type_id_is')                            print(service_type_id)                            if (service_type_id == 1):                                flag_taxi = 1                            elif (service_type_id == 2):                                flag_bus = 1                            elif (service_type_id == 3):                                flag_train = 1                            elif (service_type_id == 4):                                flag_flight = 1                            elif (service_type_id == 5):                                flag_hotel = 1                    else:                        flag_taxi = 1                        flag_bus = 1                        flag_train = 1                        flag_flight = 1                        flag_hotel = 1                    if (flag_taxi):                        print('in taxi')                        cursor = connection.cursor()                        cursor.callproc('getSalesForPrevSixMonths', [dt_date, 1, agent_user_type, 0, user.id])                        taxi = dictfetchall(cursor)                        cursor.close()                    if (flag_bus):                        print('in bus')                        cursor = connection.cursor()                        cursor.callproc('getSalesForPrevSixMonths', [dt_date, 2, agent_user_type, 0, user.id])                        bus = dictfetchall(cursor)                        cursor.close()                    if (flag_train):                        print('in train')                        cursor = connection.cursor()                        cursor.callproc('getSalesForPrevSixMonths', [dt_date, 3, agent_user_type, 0, user.id])                        train = dictfetchall(cursor)                        cursor.close()                    if (flag_flight):                        print('in flight')                        cursor = connection.cursor()                        cursor.callproc('getSalesForPrevSixMonths', [dt_date, 4, agent_user_type, 0, user.id])                        flight = dictfetchall(cursor)                        cursor.close()                    if (flag_hotel):                        print('in hotel')                        cursor = connection.cursor()                        cursor.callproc('getSalesForPrevSixMonths', [dt_date, 5, agent_user_type, 0, user.id])                        hotel = dictfetchall(cursor)                        cursor.close()                    print(taxi)                    print(bus)                    print(train)                    print(flight)                    print(hotel)                    # emp = {'taxi':43,'bus':73,'train':86,'flight':62,'hotel':77}                    data = {'success': 1, 'Sales': [taxi, bus, train, flight, hotel]}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def dashboard_bookings_for_six_months(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        month = int(request.POST.get('month', ''))        year = int(request.POST.get('year', ''))        print("month and year")        print(month)        print(year)        dt_date = datetime.datetime(year, month, 25)        print(dt_date)        user = {}        user_token = req_token.split()        flag_taxi = 0        flag_bus = 0        flag_train = 0        flag_flight = 0        flag_hotel = 0        taxi = {}        bus = {}        train = {}        flight = {}        hotel = {}        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            rm = user.is_relationship_manager            om = user.is_operation_manager            sa = user.is_super_admin            if (sa):                agent_user_type = 101            elif (rm):                agent_user_type = 102            elif (om):                agent_user_type = 103            else:                agent_user_type = 101            print('agent_user_type')            print(agent_user_type)            print(rm)            print(om)            print(sa)            if user:                try:                    if agent_user_type == 103:                        cursor = connection.cursor()                        cursor.callproc('getOmAgentDetails', [user.id])                        om_user = dictfetchall(cursor)                        cursor.close()                        print(om_user)                        for om_u in om_user:                            service_type_id = om_u['service_type_id']                            print('service_type_id_is')                            print(service_type_id)                            if (service_type_id == 1):                                flag_taxi = 1                            elif (service_type_id == 2):                                flag_bus = 1                            elif (service_type_id == 3):                                flag_train = 1                            elif (service_type_id == 4):                                flag_flight = 1                            elif (service_type_id == 5):                                flag_hotel = 1                    else:                        flag_taxi = 1                        flag_bus = 1                        flag_train = 1                        flag_flight = 1                        flag_hotel = 1                    if (flag_taxi):                        cursor = connection.cursor()                        cursor.callproc('getBookingsForPrevSixMonths', [dt_date, 1, agent_user_type, 0, user.id])                        taxi = dictfetchall(cursor)                        cursor.close()                    if (flag_bus):                        cursor = connection.cursor()                        cursor.callproc('getBookingsForPrevSixMonths', [dt_date, 2, agent_user_type, 0, user.id])                        bus = dictfetchall(cursor)                        cursor.close()                    if (flag_train):                        cursor = connection.cursor()                        cursor.callproc('getBookingsForPrevSixMonths', [dt_date, 3, agent_user_type, 0, user.id])                        train = dictfetchall(cursor)                        cursor.close()                    if (flag_flight):                        cursor = connection.cursor()                        cursor.callproc('getBookingsForPrevSixMonths', [dt_date, 4, agent_user_type, 0, user.id])                        flight = dictfetchall(cursor)                        cursor.close()                    if (flag_hotel):                        cursor = connection.cursor()                        cursor.callproc('getBookingsForPrevSixMonths', [dt_date, 5, agent_user_type, 0, user.id])                        hotel = dictfetchall(cursor)                        cursor.close()                    print(taxi)                    print(bus)                    print(train)                    print(flight)                    print(hotel)                    # emp = {'taxi':43,'bus':73,'train':86,'flight':62,'hotel':77}                    data = {'success': 1, 'Sales': [taxi, bus, train, flight, hotel]}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def dashboard_sales_by_city(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        # serveType = int(request.POST.get('serveType', ''))        flag_taxi = 0        flag_bus = 0        flag_train = 0        flag_flight = 0        flag_hotel = 0        city_taxi = {}        city_bus = {}        city_train = {}        city_flight = {}        city_hotel = {}        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            rm = user.is_relationship_manager            om = user.is_operation_manager            sa = user.is_super_admin            if (sa):                agent_user_type = 101            elif (rm):                agent_user_type = 102            elif (om):                agent_user_type = 103            else:                agent_user_type = 101            print('agent_user_type')            print(agent_user_type)            print(rm)            print(om)            print(sa)            if user:                try:                    if agent_user_type == 103:                        cursor = connection.cursor()                        cursor.callproc('getOmAgentDetails', [user.id])                        om_user = dictfetchall(cursor)                        cursor.close()                        print(om_user)                        for om_u in om_user:                            service_type_id = om_u['service_type_id']                            print('service_type_id_is')                            print(service_type_id)                            if (service_type_id == 1):                                flag_taxi = 1                            elif (service_type_id == 2):                                flag_bus = 1                            elif (service_type_id == 3):                                flag_train = 1                            elif (service_type_id == 4):                                flag_flight = 1                            elif (service_type_id == 5):                                flag_hotel = 1                    else:                        flag_taxi = 1                        flag_bus = 1                        flag_train = 1                        flag_flight = 1                        flag_hotel = 1                    if (flag_taxi):                        cursor = connection.cursor()                        cursor.callproc('getSalesByCity', [1, agent_user_type, 1, 1])                        city_taxi = dictfetchall(cursor)                        cursor.close()                    if (flag_bus):                        cursor = connection.cursor()                        cursor.callproc('getSalesByCity', [2, agent_user_type, 1, 1])                        city_bus = dictfetchall(cursor)                        cursor.close()                    if (flag_train):                        cursor = connection.cursor()                        cursor.callproc('getSalesByCity', [3, agent_user_type, 1, 1])                        city_train = dictfetchall(cursor)                        cursor.close()                    if (flag_flight):                        cursor = connection.cursor()                        cursor.callproc('getSalesByCity', [4, agent_user_type, 1, 1])                        city_flight = dictfetchall(cursor)                        cursor.close()                    if (flag_hotel):                        cursor = connection.cursor()                        cursor.callproc('getSalesByCity', [5, agent_user_type, 1, 1])                        city_hotel = dictfetchall(cursor)                        cursor.close()                    print('## dashboard_sales_by_city ##')                    print(city_taxi)                    print(city_bus)                    print(city_train)                    print(city_flight)                    print(city_hotel)                    print('#####')                    # emp = {'taxi':43,'bus':73,'train':86,'flight':62,'hotel':77}                    data = {'success': 1, 'Sales': [city_taxi, city_bus, city_train, city_flight, city_hotel]}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def dashboard_sales_by_city_for_month(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        # serveType = int(request.POST.get('serveType', ''))        month = request.POST.get('month', '')        year = request.POST.get('year', '')        yr = month        mnth = year        print("year and month")        print(yr)        print(mnth)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getSalesByCityForMonth', [1, mnth, yr, 10, 0, 0])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    cursor = connection.cursor()                    cursor.callproc('getSalesByCityForMonth', [2, mnth, yr, 10, 0, 0])                    city_bus = dictfetchall(cursor)                    cursor.close()                    cursor = connection.cursor()                    cursor.callproc('getSalesByCityForMonth', [3, mnth, yr, 10, 0, 0])                    city_train = dictfetchall(cursor)                    cursor.close()                    cursor = connection.cursor()                    cursor.callproc('getSalesByCityForMonth', [4, mnth, yr, 10, 0, 0])                    city_flight = dictfetchall(cursor)                    cursor.close()                    cursor = connection.cursor()                    cursor.callproc('getSalesByCityForMonth', [5, mnth, yr, 10, 0, 0])                    city_hotel = dictfetchall(cursor)                    cursor.close()                    print('## dashboard_sales_by_city_for_month ##')                    print(city_taxi)                    print(city_bus)                    print(city_train)                    print(city_flight)                    print(city_hotel)                    print('#####')                    # emp = {'taxi':43,'bus':73,'train':86,'flight':62,'hotel':77}                    data = {'success': 1, 'Sales': [city_taxi, city_bus, city_train, city_flight, city_hotel]}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def dashboard_taxable_amount_table(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        # serveType = int(request.POST.get('serveType', ''))        frm_date = request.POST.get('from_date', '')        to_date = request.POST.get('to_date', '')        print("tax from to date")        print(frm_date)        print(to_date)        flag_taxi = 0        flag_bus = 0        flag_train = 0        flag_flight = 0        flag_hotel = 0        city_taxi = []        city_bus = []        city_train = []        city_flight = []        city_hotel = []        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            rm = user.is_relationship_manager            om = user.is_operation_manager            sa = user.is_super_admin            if (sa):                agent_user_type = 101            elif (rm):                agent_user_type = 102            elif (om):                agent_user_type = 103            else:                agent_user_type = 101            print('agent_user_type')            print(agent_user_type)            print(rm)            print(om)            print(sa)            if user:                try:                    if agent_user_type == 103:                        cursor = connection.cursor()                        cursor.callproc('getOmAgentDetails', [user.id])                        om_user = dictfetchall(cursor)                        cursor.close()                        print(om_user)                        for om_u in om_user:                            service_type_id = om_u['service_type_id']                            print('service_type_id')                            print(service_type_id)                            if (service_type_id == 1):                                flag_taxi = 1                            elif (service_type_id == 2):                                flag_bus = 1                            elif (service_type_id == 3):                                flag_train = 1                            elif (service_type_id == 4):                                flag_flight = 1                            elif (service_type_id == 5):                                flag_hotel = 1                    else:                        flag_taxi = 1                        flag_bus = 1                        flag_train = 1                        flag_flight = 1                        flag_hotel = 1                    if (flag_taxi):                        cursor = connection.cursor()                        cursor.callproc('getTaxableDataForDashboard', [1, frm_date, to_date, user.id, agent_user_type])                        city_taxi = dictfetchall(cursor)                        cursor.close()                    if (flag_bus):                        cursor = connection.cursor()                        cursor.callproc('getTaxableDataForDashboard', [2, frm_date, to_date, user.id, agent_user_type])                        city_bus = dictfetchall(cursor)                        cursor.close()                    if (flag_train):                        cursor = connection.cursor()                        cursor.callproc('getTaxableDataForDashboard', [3, frm_date, to_date, user.id, agent_user_type])                        city_train = dictfetchall(cursor)                        cursor.close()                    if (flag_flight):                        cursor = connection.cursor()                        cursor.callproc('getTaxableDataForDashboard', [4, frm_date, to_date, user.id, agent_user_type])                        city_flight = dictfetchall(cursor)                        cursor.close()                    if (flag_hotel):                        cursor = connection.cursor()                        cursor.callproc('getTaxableDataForDashboard', [5, frm_date, to_date, user.id, agent_user_type])                        city_hotel = dictfetchall(cursor)                        cursor.close()                    print('## city wise ##')                    print(city_taxi)                    print(city_bus)                    print(city_train)                    print(city_flight)                    print(city_hotel)                    print('#####')                    # emp = {'taxi':43,'bus':73,'train':86,'flight':62,'hotel':77}                    data = {'success': 1, 'Tax': [city_taxi, city_bus, city_train, city_flight, city_hotel]}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def dashboard_hotel_bookings_summery(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getHotelBookingsSummery', [])                    emp = dictfetchall(cursor)                    cursor.close()                    print('### hotel bookings summery ###')                    print(emp)                    # emp = {'taxi':43,'bus':73,'train':86,'flight':62,'hotel':77}                    data = {'success': 1, 'Hotel': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def get_all_bills(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        corporate_id = request.POST.get('corporate_id', '')        service_type = request.POST.get('service_type', '')        date_type = request.POST.get('date_type', '')        from_date = request.POST.get('from_date', '')        to_date = request.POST.get('to_date', '')        if from_date:            from_date = datetime.datetime.strptime(from_date, '%d-%m-%Y')        if to_date:            to_date = datetime.datetime.strptime(to_date, '%d-%m-%Y')        if not corporate_id:            corporate_id = 0        if not service_type:            service_type = 1        if not date_type:            date_type = 1        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllBills', [corporate_id,service_type,date_type,from_date,to_date])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Bill': city_taxi}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message1': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def get_all_generated_bills(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        bill_type = request.POST.get('bill_type', '')        print(bill_type)        print("Bill Type")        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllGeneratedBills', [bill_type])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Bill': city_taxi}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def get_all_bill_payment_status(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        bill_type = request.POST.get('bill_type', '')        print(bill_type)        print("Bill Type")        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getAllBillPaymentStatus', [bill_type])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Bill': city_taxi}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def bill_create_nontax_invoice(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        invoice_ids = request.POST.getlist('invoice_ids')        service_types = request.POST.getlist('service_types')        management_fees = request.POST.getlist('management_fees')        management_fee_igsts = request.POST.getlist('management_fee_igsts')        management_fee_cgsts = request.POST.getlist('management_fee_cgsts')        management_fee_sgsts = request.POST.getlist('management_fee_sgsts')        sub_totals = request.POST.getlist('sub_totals')        cotrav_billing_ids = request.POST.getlist('cotrav_billing_ids')        billing_ids = request.POST.getlist('billing_ids')        po_number = request.POST.get('po_number')        bill_date = request.POST.get('bill_date')        bill_date = datetime.datetime.strptime(bill_date, '%d-%m-%Y %H:%M:%S')        corporate_ids = request.POST.getlist('corporate_ids')        tds_yes = request.POST.getlist('tds_yes')        sub_total = sum(int(i) for i in sub_totals)        management_fee = sum(int(i) for i in management_fees)        management_fee_igst = sum(int(i) for i in management_fee_igsts)        management_fee_cgst = sum(int(i) for i in management_fee_cgsts)        management_fee_sgst = sum(int(i) for i in management_fee_sgsts)        taxi_flag = bus_flag = train_flag = hotel_flag = flight_flag = 0        for i in range(len(service_types)):            if service_types[i] == '1' or service_types[i] == '2' or service_types[i] == '3':                taxi_flag = 1            elif service_types[i] == '4':                bus_flag = 1            elif service_types[i] == '5':                train_flag = 1            elif service_types[i] == '6':                hotel_flag = 1            elif service_types[i] == '7':                flight_flag = 1        print("all flag")        print(taxi_flag)        print(bus_flag)        print(train_flag)        print(hotel_flag)        print(flight_flag)        bill_no_of_invoices = len(invoice_ids)        is_tds_management = None        print("is tds yes")        print(tds_yes)        if tds_yes[0] == '1':            system_calculated_tds = float((float(sub_total)+float(management_fee))*float(0.02)) #2% TDS DECUCT            is_tds_management = 1        else:            system_calculated_tds = float(float(management_fee)*float(0.02)) #2% TDS DECUCT            is_tds_management = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addNewClientBill', [billing_ids,cotrav_billing_ids,management_fee,management_fee_igst,                    management_fee_cgst,management_fee_sgst,sub_total,system_calculated_tds,'@get_bill_id',corporate_ids[0],bill_no_of_invoices,po_number,bill_date,taxi_flag,bus_flag,train_flag,hotel_flag,flight_flag,is_tds_management])                    booking_id = dictfetchall(cursor)                    if booking_id:                        data = {'success': 0, 'message': booking_id}                    else:                        cursor.execute("SELECT @get_bill_id")                        bill_id = cursor.fetchone()[0]                        print("bill id")                        print(bill_id)                        cursor.close()                        print(invoice_ids)                        print(len(invoice_ids))                        for i in range(len(invoice_ids)):                            cursor2 = connection.cursor()                            cursor2.callproc('updateBillNoWithServiceType', [bill_id,invoice_ids[i],service_types[i]])                            emp = dictfetchall(cursor2)                            cursor2.close()                        cursor1 = connection.cursor()                        cursor1.callproc('viewBillDetails', [bill_id])                        bill_details = dictfetchall(cursor1)                        cursor1.close()                        print(bill_details)                        print("get datatype")                        if bill_details[0]['taxi_flag']:                            cursor2 = connection.cursor()                            cursor2.callproc('getAllTaxiBookingInvoiceByBillID', [bill_id])                            emp = dictfetchall(cursor2)                            cursor2.close()                            bill_details[0]['BookingTaxi'] = emp                            cursor1 = connection.cursor()                            booking_id = emp[0]['id']                            cursor1.callproc('getAllTaxiBookingPassangers', [booking_id])                            passanger = dictfetchall(cursor1)                            cursor1.close()                            emp[0]['Passanger'] = passanger                            cursor3 = connection.cursor()                            cursor3.callproc('getAllTaxiBookingsActionLogs', [booking_id])                            actions = dictfetchall(cursor3)                            cursor3.close()                            emp[0]['ActionLogs'] = actions                        if bill_details[0]['bus_flag']:                            cursor2 = connection.cursor()                            cursor2.callproc('getAllBusBookingInvoiceByBillID', [bill_id])                            emp = dictfetchall(cursor2)                            cursor2.close()                            bill_details[0]['BookingBus'] = emp                            cursor1 = connection.cursor()                            booking_id = emp[0]['id']                            cursor1.callproc('getAllBusBookingPassangers', [booking_id])                            passanger = dictfetchall(cursor1)                            cursor1.close()                            emp[0]['Passanger'] = passanger                            cursor3 = connection.cursor()                            cursor3.callproc('getAllBusBookingsActionLogs', [booking_id])                            actions = dictfetchall(cursor3)                            cursor3.close()                            emp[0]['ActionLogs'] = actions                        if bill_details[0]['train_flag']:                            cursor2 = connection.cursor()                            cursor2.callproc('getAllTrainBookingInvoiceByBillID', [bill_id])                            emp = dictfetchall(cursor2)                            cursor2.close()                            bill_details[0]['BookingTrain'] = emp                            cursor1 = connection.cursor()                            booking_id = emp[0]['id']                            cursor1.callproc('getAllTrainBookingPassangers', [booking_id])                            passanger = dictfetchall(cursor1)                            cursor1.close()                            emp[0]['Passanger'] = passanger                            cursor3 = connection.cursor()                            cursor3.callproc('getAllTrainBookingsActionLogs', [booking_id])                            actions = dictfetchall(cursor3)                            cursor3.close()                            emp[0]['ActionLogs'] = actions                        if bill_details[0]['hotel_flag']:                            cursor2 = connection.cursor()                            cursor2.callproc('getAllHotelBookingInvoiceByBillID', [bill_id])                            emp = dictfetchall(cursor2)                            cursor2.close()                            bill_details[0]['BookingHotel'] = emp                            cursor1 = connection.cursor()                            booking_id = emp[0]['id']                            cursor1.callproc('getAllHotelBookingPassangers', [booking_id])                            passanger = dictfetchall(cursor1)                            cursor1.close()                            emp[0]['Passanger'] = passanger                            cursor3 = connection.cursor()                            cursor3.callproc('getAllHotelBookingsActionLogs', [booking_id])                            actions = dictfetchall(cursor3)                            cursor3.close()                            emp[0]['ActionLogs'] = actions                        if bill_details[0]['flight_flag']:                            cursor2 = connection.cursor()                            cursor2.callproc('getAllFlightBookingInvoiceByBillID', [bill_id])                            emp = dictfetchall(cursor2)                            cursor2.close()                            bill_details[0]['BookingFlight'] = emp                            cursor1 = connection.cursor()                            booking_id = emp[0]['id']                            cursor1.callproc('getAllFlightBookingPassangers', [booking_id])                            passanger = dictfetchall(cursor1)                            cursor1.close()                            emp[0]['Passanger'] = passanger                            cursor3 = connection.cursor()                            cursor3.callproc('getAllFlightBookingsActionLogs', [booking_id])                            actions = dictfetchall(cursor3)                            cursor3.close()                            emp[0]['ActionLogs'] = actions                        if len(invoice_ids) == 1:                            voucher = {'bill_datas': bill_details[0]}                            bus_pdf = Bill(voucher)                            get_vou = bus_pdf.get_file_path(request)                            get_voucher_path = get_vou[1]                            print(get_voucher_path)                            print("single invoice")                            cursor1 = connection.cursor()                            cursor1.callproc('updatePDFBillDetails', [bill_id,get_vou[0]])                            bill = dictfetchall(cursor1)                            cursor1.close()                        else:                            voucher = {'bill_datas': bill_details[0]}                            bus_pdf = Bill(voucher)                            get_vou = bus_pdf.get_file_path_multiple_invoice(request)                            get_voucher_path = get_vou[1]                            print(get_voucher_path)                            cursor1 = connection.cursor()                            cursor1.callproc('updatePDFBillDetails', [bill_id, get_vou[0]])                            bill = dictfetchall(cursor1)                            cursor1.close()                    print("bill out")                    print(booking_id)                    data = {'success': 1, 'Bill': booking_id, 'voucher_path':get_voucher_path}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def bill_create_final_invoice(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        bill_id = request.POST.getlist('bill_id')        is_tds = request.POST.getlist('is_tds')        user = {}        get_voucher_path2 =''        get_voucher_path = ''        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor1 = connection.cursor()                    cursor1.callproc('viewBillDetails', [bill_id])                    bill_details = dictfetchall(cursor1)                    cursor1.close()                    print(bill_details)                    print("get ISSSSSS TDDDDSSSS")                    print(is_tds[0])                    if bill_details[0]['taxi_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllTaxiBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        bill_details[0]['BookingTaxi'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllTaxiBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllTaxiBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    if bill_details[0]['bus_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllBusBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        bill_details[0]['BookingBus'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllBusBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllBusBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    if bill_details[0]['train_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllTrainBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        bill_details[0]['BookingTrain'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllTrainBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllTrainBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    if bill_details[0]['hotel_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllHotelBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        bill_details[0]['BookingHotel'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllHotelBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllHotelBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    if bill_details[0]['flight_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllFlightBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        bill_details[0]['BookingFlight'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllFlightBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllFlightBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    if is_tds[0] == '1':                        voucher = {'bill_datas': bill_details[0]}                        bus_pdf = Bill(voucher)                        get_vou = bus_pdf.get_file_path_tax(request)                        get_voucher_path = get_vou[1]                        get_vou2 = bus_pdf.get_file_path_rembusment(request)                        get_voucher_path2 = get_vou2[1]                        print(get_voucher_path)                        print("single invoice")                        cursor1 = connection.cursor()                        cursor1.callproc('updateFinalBillDetails', [bill_id,get_vou[0],get_vou2[0]])                        bill = dictfetchall(cursor1)                        cursor1.close()                    else:                        voucher = {'bill_datas': bill_details[0]}                        bus_pdf = Bill(voucher)                        get_vou = bus_pdf.get_file_path_tax(request)                        get_voucher_path = get_vou[1]                        print(get_voucher_path)                        cursor1 = connection.cursor()                        cursor1.callproc('updateFinalBillDetails', [bill_id, get_vou[0], ''])                        bill = dictfetchall(cursor1)                        cursor1.close()                    print("bill out")                    data = {'success': 1, 'Bill': bill_id, 'voucher_path':get_voucher_path, 'voucher_path2':get_voucher_path2,}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_booking_tracking_status(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        booking_type = request.POST.get('booking_type', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addNewTrackingStatus', [booking_type,user_id,booking_id,user_comment])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "Tracking Status Added Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_booking_assign_to_agent(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        to_user_id = request.POST.get('to_user_id', '')        booking_type = request.POST.get('booking_type', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addNewAssignToAgent', [booking_type,user_id,to_user_id,user_comment,booking_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "Assign Agent Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def change_booking_status(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        status_id = request.POST.get('status_id', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateTrainBookingStatus', [status_id,user_comment,booking_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "Assign Agent Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def accept_bill(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('acceptBill', [user_id,user_type,booking_id,user_comment])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Bill Accepted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def reject_bill(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        booking_id = request.POST.get('booking_id', '')        user_id = request.POST.get('user_id', '')        user_comment = request.POST.get('user_comment', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('rejectBill', [user_id,user_type,booking_id,user_comment])                    company = dictfetchall(cursor)                    if company:                        data = {'success': 0, 'message': company}                    else:                        data = {'success': 1, 'message': "Bill Accepted Successfully"}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def view_bill(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        bill_id = request.POST.get('bill_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('viewBillDetails', [bill_id])                    company = dictfetchall(cursor)                    cursor.close()                    if company[0]['taxi_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllTaxiBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        company[0]['BookingTaxi'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllTaxiBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllTaxiBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    if company[0]['bus_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllBusBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        company[0]['BookingBus'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllBusBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllBusBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    if company[0]['train_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllTrainBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        company[0]['BookingTrain'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllTrainBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllTrainBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    if company[0]['hotel_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllHotelBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        company[0]['BookingHotel'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllHotelBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllHotelBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    if company[0]['flight_flag']:                        cursor2 = connection.cursor()                        cursor2.callproc('getAllFlightBookingInvoiceByBillID', [bill_id])                        emp = dictfetchall(cursor2)                        cursor2.close()                        company[0]['BookingFlight'] = emp                        cursor1 = connection.cursor()                        booking_id = emp[0]['id']                        cursor1.callproc('getAllFlightBookingPassangers', [booking_id])                        passanger = dictfetchall(cursor1)                        cursor1.close()                        emp[0]['Passanger'] = passanger                        cursor3 = connection.cursor()                        cursor3.callproc('getAllFlightBookingsActionLogs', [booking_id])                        actions = dictfetchall(cursor3)                        cursor3.close()                        emp[0]['ActionLogs'] = actions                    data = {'success': 1, 'Bill': company}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_bill(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        bill_id = request.POST.get('bill_id', '')        bill_number = request.POST.get('bill_number', '')        user_id = request.POST.get('user_id', '')        corporate_id = request.POST.get('corporate_id', '')        client_billing_entity = request.POST.get('client_billing_entity', '')        cotrav_billing_entity = request.POST.get('cotrav_billing_entity', '')        current_url = request.POST.get('current_url', '')        po_id = request.POST.get('po_id', '')        management_fee = request.POST.get('management_fee', '')        tds_deducted_by_client = request.POST.get('tds_deducted_by_client', '')        system_calculated_tds = request.POST.get('system_calculated_tds', '')        igst = request.POST.get('igst', '')        cgst = request.POST.get('cgst', '')        sgst = request.POST.get('sgst', '')        gst_paid = request.POST.get('gst_paid', '')        total_amount = request.POST.get('total_amount', '')        bill_created_date = request.POST.get('bill_created_date', '')        bill_created_date = datetime.datetime.strptime(bill_created_date, '%d-%m-%Y %H:%M')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateBill', [bill_id,bill_number,corporate_id,client_billing_entity,cotrav_billing_entity,po_id,management_fee,tds_deducted_by_client,                    system_calculated_tds,igst,cgst,sgst,gst_paid,total_amount,bill_created_date])                    company = dictfetchall(cursor)                    data = {'success': 1, 'Bill': company}                    cursor.close()                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def get_corporate_podetails(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        corporate_id = request.POST.get('corporate_id', '')        if not corporate_id:            corporate_id =0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getallCorporatePODetails', [corporate_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'PO': city_taxi}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_podetails(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        corporate_id = request.POST.get('corporate_id', '')        po_number = request.POST.get('po_number')        po_date = request.POST.get('po_date', '')        po_date = datetime.datetime.strptime(po_date, '%d-%m-%Y %H:%M')        po_amount = request.POST.get('po_amount', '')        po_copy = request.POST.get('po_copy', '')        po_balance = request.POST.get('po_balance', '')        if not corporate_id:            corporate_id =0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addCorporatePODetails', [corporate_id,po_number,po_date,po_amount,po_copy,po_balance])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "PO Number Added Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_podetails(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        corporate_id = request.POST.get('corporate_id', '')        po_number = request.POST.get('po_number')        po_date = request.POST.get('po_date', '')        po_date = datetime.datetime.strptime(po_date, '%d-%m-%Y %H:%M')        po_amount = request.POST.get('po_amount', '')        po_copy = request.POST.get('po_copy', '')        po_balance = request.POST.get('po_balance', '')        bill_id = request.POST.get('bill_id', '')        if not corporate_id:            corporate_id =0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateCorporatePODetails', [corporate_id,po_number,po_date,po_amount,po_copy,po_balance,bill_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "PO Number Updated Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_podetails(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        bill_id = request.POST.get('bill_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteCorporatePODetails', [bill_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "PO Number Deleted Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def get_corporate_accounts(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        corporate_id = request.POST.get('corporate_id', '')        if not corporate_id:            corporate_id =0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getallCorporateAccounts', [corporate_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Accounts': city_taxi}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_corporate_account(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        corporate_id = request.POST.get('corporate_id', '')        bank_name = request.POST.get('bank_name')        bank_branch = request.POST.get('bank_branch', '')        acoount_no = request.POST.get('acoount_no', '')        acoount_holder_name = request.POST.get('acoount_holder_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        micr_code = request.POST.get('micr_code', '')        if not corporate_id:            corporate_id =0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addCorporateAccount', [corporate_id,bank_name,bank_branch,acoount_no,acoount_holder_name,ifsc_code,micr_code])                    city_taxi = dictfetchall(cursor)                    print(city_taxi)                    cursor.close()                    data = {'success': 1, 'message': "Account Added Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_corporate_account(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        corporate_id = request.POST.get('corporate_id', '')        corporate_id = request.POST.get('corporate_id', '')        bank_name = request.POST.get('bank_name')        bank_branch = request.POST.get('bank_branch', '')        acoount_no = request.POST.get('acoount_no', '')        acoount_holder_name = request.POST.get('acoount_holder_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        micr_code = request.POST.get('micr_code', '')        account_id = request.POST.get('account_id', '')        if not corporate_id:            corporate_id =0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateCorporateAccount', [corporate_id,bank_name,bank_branch,acoount_no,acoount_holder_name,ifsc_code,micr_code,account_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "Account Updated Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_corporate_account(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        account_id = request.POST.get('account_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteCorporateAccount', [account_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "Account Deleted Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def get_cotrav_accounts(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getallCotravAccounts', [])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Accounts': city_taxi}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def add_cotrav_account(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        bank_name = request.POST.get('bank_name')        bank_branch = request.POST.get('bank_branch', '')        acoount_no = request.POST.get('acoount_no', '')        acoount_holder_name = request.POST.get('acoount_holder_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        micr_code = request.POST.get('micr_code', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('addCotravAccounts', [bank_name,bank_branch,acoount_no,acoount_holder_name,ifsc_code,micr_code])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "Account Added Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_cotrav_account(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        bank_name = request.POST.get('bank_name')        bank_branch = request.POST.get('bank_branch', '')        acoount_no = request.POST.get('acoount_no', '')        acoount_holder_name = request.POST.get('acoount_holder_name', '')        ifsc_code = request.POST.get('ifsc_code', '')        micr_code = request.POST.get('micr_code', '')        account_id = request.POST.get('account_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateCotravAccount', [bank_name,bank_branch,acoount_no,acoount_holder_name,ifsc_code,micr_code,account_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "Account Updated Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def delete_cotrav_account(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        account_id = request.POST.get('account_id', '')        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('deleteCotravAccount', [account_id])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "Account Deleted Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def pay_bill(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        bill_id = request.POST.get('bill_id', '')        user_id = request.POST.get('user_id', '')        payment_mode = request.POST.get('payment_mode', '')        paid_amount = request.POST.get('paid_amount', '')        payment_ref_no = request.POST.get('payment_ref_no', '')        paid_by = request.POST.get('paid_by', '')        paid_to = request.POST.get('paid_to', '')        payment_dateTime = request.POST.get('payment_dateTime', '')        payment_dateTime =  datetime.datetime.strptime(payment_dateTime, '%d-%m-%Y')        attachments = request.POST.get('attachments', '')        user_comment = request.POST.get('user_comment', '')        total_paid = request.POST.get('total_paid', '')        total_balance = request.POST.get('total_balance', '')        total = request.POST.get('total', '')        paybale = request.POST.get('paybale', '')        if not total_paid:            total_paid= 0        if float(total_balance) == 0.0:            total_balance=round(float(paybale), 2) - round(float(paid_amount), 2)            print("in if")            print(total_paid)            print(paid_amount)            print(total_balance)        else:            total_balance = round(float(total_balance), 2) - round(float(paid_amount), 2)            print("in else")            print(total_paid)            print(paid_amount)            print(total_balance)        total_paid = round(float(total_paid), 2) + round(float(paid_amount), 2)        cotrav_status = None        if total_balance <= 1:            total_balance = 0            cotrav_status = 12            print("in if total balance")        else:            cotrav_status = 11            print("in else total balance")        print("Print Paid")        print(total_balance)        print(total_paid)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('payBill', [bill_id,payment_mode,paid_amount,payment_ref_no,paid_by,payment_dateTime,attachments,user_comment,total_paid,total_balance,cotrav_status,paid_to])                    city_taxi = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'message': "Payment Successfully..!"}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def dashboard_search_bookings(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        whereClause = request.POST.get('whereClause', '')        serveType = request.POST.get('serveType', '')        bookingType = int(request.POST.get('booking_type', ''))        print(whereClause)        print(serveType)        if (bookingType == ''):            bookingType = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('dashboardSearch', [serveType,whereClause,bookingType])                    search_result = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Result': search_result}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def softdeleated_operators(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        operType = int(request.POST.get('type', ''))        user_id = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getSoftDeletedOperator', [operType,user_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Operators': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def softdeleated_taxies(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        taxiType = int(request.POST.get('type', ''))        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getSoftDeletedTaxiOperator', [taxiType])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Taxi': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def softdeleated_companies(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        compType = int(request.POST.get('type', ''))        corporate_id = 0        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('getSoftdeleatedCompanies', [compType,corporate_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Companies': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_softdeleated(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        table_name = request.POST.get('table_name', '')        record_id = int(request.POST.get('record_id', ''))        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateSoftDeletedRecords', [table_name, record_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Operators': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def update_passanger_for_booking(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        employee_id = request.POST.get('employee_id', '')        core_employee_id = request.POST.get('core_employee_id', '')        employee_name = request.POST.get('employee_name', '')        employee_email = request.POST.get('employee_email', '')        employee_contact = request.POST.get('employee_contact', '')        print("GET PAPAPAPAPAP")        print(employee_id)        print(core_employee_id)        print(employee_name)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            user = getUserinfoFromAccessToken(user_token[1], user_type)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('updateBookingsPassanger', [employee_id , core_employee_id , employee_name , employee_email , employee_contact ])                    emp = dictfetchall(cursor)                    cursor.close()                    print('responce is')                    print(emp)                    data = {'success': 1, 'employee': emp}                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'error': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'error': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'Corporates': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'error': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def get_visa_services(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        visa_type = request.POST.get('visa_type', '')        page_no = request.POST.get('page_no', '')        limit_from = 0        limit_to = 0        print(page_no)        if page_no:            limit_from = (int(page_no) - 1) * 10            limit_to = 10        else:            limit_from = 0            limit_to = 2147483647        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                cursor = connection.cursor()                cursor.callproc('getAllAgentVisaServices', [visa_type,limit_from,limit_to,user.id])                emp = dictfetchall(cursor)                cursor.close()                for e in emp:                    try:                        cursor1 = connection.cursor()                        booking_id = e['id']                        print(booking_id)                        cursor1.callproc('getAllAgentVisaFamily', [booking_id])                        passanger = dictfetchall(cursor1)                        e['Famaily'] = passanger                        cursor1.close()                        e['visa_type'] = visa_type                    except Exception as e:                        data = {'success': 0, 'message': getattr(e, 'message', str(e))}                        return JsonResponse(data)                data = {'success': 1, 'Visa': emp, 'visa_type':visa_type}                return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def get_all_cotrav_visa_requests(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        visa_type = request.POST.get('visa_type', '')        page_no = request.POST.get('page_no', '')        limit_from = 0        limit_to = 0        print(page_no)        if page_no:            limit_from = (int(page_no) - 1) * 10            limit_to = 10        else:            limit_from = 0            limit_to = 2147483647        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                cursor = connection.cursor()                cursor.callproc('getAllAgentVisaRequests', [])                emp = dictfetchall(cursor)                cursor.close()                data = {'success': 1, 'Visa': emp, 'visa_type':visa_type}                return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def report_invoice(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        service_type = int(request.POST.get('service_type', ''))        date_type = int(request.POST.get('date_type', ''))        from_date = request.POST.get('from_date', '')        #from_date = datetime.datetime.strptime(from_date, '%m-%d-%Y %H:%M:%S')        if from_date == '' :            dt = date.today()            from_date = dt.strftime("%d-%m-%Y") + ' 00:00:00'            from_date_object = datetime.datetime.strptime(from_date, '%d-%m-%Y %H:%M:%S')            from_date = from_date_object.strftime("%Y-%m-%d (%H:%M:%S.%f)")        else:            from_date = from_date + ' 00:00:00'            from_date_object = datetime.datetime.strptime(from_date, '%d-%m-%Y %H:%M:%S')            from_date = from_date_object.strftime("%Y-%m-%d (%H:%M:%S.%f)")        print("from_date......")        print(from_date)        to_date = request.POST.get('to_date', '')        #to_date = datetime.datetime.strptime(to_date, '%m-%d-%Y %H:%M:%S')        if to_date == '' :            dt = date.today()            to_date = dt.strftime("%d-%m-%Y") + ' 00:00:00'            to_date_object = datetime.datetime.strptime(to_date, '%d-%m-%Y %H:%M:%S')            to_date = to_date_object.strftime("%Y-%m-%d (%H:%M:%S.%f)")        else:            to_date = to_date + ' 00:00:00'            to_date_object = datetime.datetime.strptime(to_date, '%d-%m-%Y %H:%M:%S')            to_date = to_date_object.strftime("%Y-%m-%d (%H:%M:%S.%f)")        corporate_id = int(request.POST.get('corporate_id', ''))        print('frommm date')        print(from_date)        print('toooo date')        print(to_date)        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('invoiceReport', [service_type , date_type , from_date , to_date , corporate_id])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Reports': emp}                    #print(data)                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def report_client_bills(request):    if 'AUTHORIZATION' in request.headers and 'USERTYPE' in request.headers:        req_token = request.META['HTTP_AUTHORIZATION']        user_type = request.META['HTTP_USERTYPE']        service_type = int(request.POST.get('service_type', ''))        bill_status = int(request.POST.get('bill_status', ''))        from_date = request.POST.get('from_date', '')        #from_date = datetime.datetime.strptime(from_date, '%m-%d-%Y %H:%M:%S')        if from_date:            from_date = from_date + ' 00:00:00'            from_date_object = datetime.datetime.strptime(from_date, '%d-%m-%Y %H:%M:%S')            from_date = from_date_object.strftime("%Y-%m-%d (%H:%M:%S.%f)")            print("from_date......")            print(from_date)        to_date = request.POST.get('to_date', '')        if to_date:            to_date = to_date + ' 00:00:00'            to_date_object = datetime.datetime.strptime(to_date, '%d-%m-%Y %H:%M:%S')            to_date = to_date_object.strftime("%Y-%m-%d (%H:%M:%S.%f)")        corporate_id = int(request.POST.get('corporate_id', ''))        user = {}        user_token = req_token.split()        if user_token[0] == 'Token':            try:                user = getUserinfoFromAccessToken(user_token[1], user_type)            except Exception as e:                data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}                return JsonResponse(data)            if user:                try:                    cursor = connection.cursor()                    cursor.callproc('reportsClientBills', [service_type , corporate_id , bill_status , from_date , to_date ])                    emp = dictfetchall(cursor)                    cursor.close()                    data = {'success': 1, 'Bill': emp}                    #print(data)                    return JsonResponse(data)                except Exception as e:                    data = {'success': 0, 'message': getattr(e, 'message', str(e))}                    return JsonResponse(data)            else:                data = {'success': 0, 'message': "User Information Not Found"}                return JsonResponse(data)        else:            data = {'success': 0, 'message': "Token Not Found"}            return JsonResponse(data)    else:        data = {'success': 0, 'message': "Missing Parameter Value Try Again..."}        return JsonResponse(data)def generate_pdf_voucher(data,template):    render = Render()    path = render.render_to_file(template,data)    print(path)    return pathdef _sum(arr,n):    # return sum using sum    # inbuilt sum() function    return(sum(arr))